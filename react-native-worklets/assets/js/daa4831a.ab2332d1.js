"use strict";(self.webpackChunkdocs_worklets=self.webpackChunkdocs_worklets||[]).push([[340],{1384:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"fundamentals/glossary","title":"Glossary of terms","description":"Worklet","source":"@site/docs/fundamentals/glossary.mdx","sourceDirName":"fundamentals","slug":"/fundamentals/glossary","permalink":"/react-native-reanimated/react-native-worklets/docs/fundamentals/glossary","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-worklets/docs/fundamentals/glossary.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/react-native-reanimated/react-native-worklets/docs/"},"next":{"title":"Threading","permalink":"/react-native-reanimated/react-native-worklets/docs/category/threading"}}');var r=t(4848),i=t(8453);const o={},s="Glossary of terms",l={},d=[{value:"Worklet",id:"worklet",level:2},{value:"to workletize",id:"to-workletize",level:2},{value:"JavaScript thread",id:"javascript-thread",level:2},{value:"UI thread",id:"ui-thread",level:2},{value:"Reanimated Babel plugin",id:"reanimated-babel-plugin",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"glossary-of-terms",children:"Glossary of terms"})}),"\n",(0,r.jsx)(n.h2,{id:"worklet",children:"Worklet"}),"\n",(0,r.jsxs)(n.p,{children:["Worklets are short-running JavaScript functions that can be run on the ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),". They can also be run on a JavaScript thread just as you would run a function in your code."]}),"\n",(0,r.jsxs)(n.p,{children:["Most of the time when working with Reanimated the code is automatically ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#to-workletize",children:"workletized"})," and run on the UI thread by default."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const style = useAnimatedStyle(() => {\n  console.log('Running on the UI thread');\n  return { opacity: 0.5 };\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can create your own worklets using the ",(0,r.jsx)(n.code,{children:'"worklet";'})," directive at the top of a function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function myWorklet() {\n  'worklet';\n  console.log('Running on the UI thread');\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/threading/runOnUI",children:(0,r.jsx)(n.code,{children:"runOnUI"})})," lets you manually run worklets on the UI thread:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function myWorklet(greeting) {\n  'worklet';\n  console.log(`${greeting} from the UI thread`);\n}\n\nfunction onPress() {\n  // highlight-next-line\n  runOnUI(myWorklet)('Howdy');\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"to-workletize",children:"to workletize"}),"\n",(0,r.jsxs)(n.p,{children:["To convert a JavaScript function into a serializable object which can be copied and run over on ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#ui-thread",children:"UI thread"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Functions marked with ",(0,r.jsx)(n.code,{children:'"worklet";'})," directive are automatically picked up and workletized by the Reanimated Babel plugin."]}),"\n",(0,r.jsx)(n.h2,{id:"javascript-thread",children:"JavaScript thread"}),"\n",(0,r.jsx)(n.p,{children:"JavaScript thread (or JS thread for short) is responsible for handling JavaScript code execution in the app."}),"\n",(0,r.jsx)(n.p,{children:"This is the primary place where the React Native app code is executed."}),"\n",(0,r.jsx)(n.h2,{id:"ui-thread",children:"UI thread"}),"\n",(0,r.jsx)(n.p,{children:"UI thread is responsible for handling user interface updates. Also known as Main thread."}),"\n",(0,r.jsxs)(n.p,{children:["You can learn more about it by reading the ",(0,r.jsx)(n.a,{href:"https://reactnative.dev/architecture/threading-model",children:"Threading model"})," article in the official React Native docs."]}),"\n",(0,r.jsx)(n.h2,{id:"reanimated-babel-plugin",children:"Reanimated Babel plugin"}),"\n",(0,r.jsxs)(n.p,{children:["The plugin performs automatic ",(0,r.jsx)(n.a,{href:"/docs/fundamentals/glossary#to-workletize",children:"workletization"})," of certain functions used with Reanimated to reduce the amount of boilerplate code."]}),"\n",(0,r.jsxs)(n.p,{children:["You can learn the details by reading the ",(0,r.jsx)(n.a,{href:"https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md",children:"Reanimated Babel plugin README"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(6540);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);
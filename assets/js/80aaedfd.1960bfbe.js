"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[6180],{27006:(e,t,n)=>{n.d(t,{A:()=>m});var a=n(58168),l=n(96540),o=n(9176),r=n(78506),i=n(62257),s=n(72188),c=n(15782),d=n(55535);const u={code:'function ScrollViewOffsetTsx1(){const{offset}=this.__closure;return"Scroll offset: "+offset.value.toFixed(1);}'};function m(){const e=(0,d.useAnimatedRef)(),t=(0,d.useScrollViewOffset)(e),n=(0,d.useDerivedValue)(function(){const e=()=>`Scroll offset: ${t.value.toFixed(1)}`;return e.__closure={offset:t},e.__workletHash=0xb7cc16efb6b,e.__initData=u,e}()),[a,s]=l.useState(!1);return l.createElement(o.A,{style:f.container},l.createElement(y,{text:n}),l.createElement(d.default.ScrollView,{style:f.scroll,contentContainerStyle:f.scrollContent,ref:e,horizontal:a},Array.from({length:10}).map(((e,t)=>l.createElement(o.A,{key:t,style:f.box},l.createElement(r.A,{style:f.center},t))))),l.createElement(i.A,{title:"Toggle scroll to "+(a?"vertical":"horizontal"),onPress:()=>s(!a)}))}const f=s.A.create({container:{alignItems:"center"},scroll:{borderWidth:1,borderColor:"gray",height:250,width:250,margin:20},scrollContent:{alignItems:"center"},box:{width:100,height:100,margin:10,borderRadius:15,backgroundColor:"#b58df1",alignItems:"center",justifyContent:"center"},center:{textAlign:"center"}}),p=d.default.createAnimatedComponent(c.A);d.default.addWhitelistedNativeProps({text:!0});const g={code:"function ScrollViewOffsetTsx2(){const{text}=this.__closure;return{text:text.value,defaultValue:text.value};}"};function y(e){let{text:t,...n}=e;const o=(0,d.useAnimatedProps)(function(){const e=()=>({text:t.value,defaultValue:t.value});return e.__closure={text:t},e.__workletHash=0x9bcbbb71bc5,e.__initData=g,e}());return l.createElement(p,(0,a.A)({editable:!1},n,{value:t.value,animatedProps:o}))}},7298:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>b,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(58168),l=(n(96540),n(15680)),o=n(27006),r=n(37443);const i={sidebar_position:2},s="useScrollViewOffset",c={unversionedId:"scroll/useScrollViewOffset",id:"scroll/useScrollViewOffset",title:"useScrollViewOffset",description:"useScrollViewOffset lets you to create animations based on the offset of a ScrollView.",source:"@site/docs/scroll/useScrollViewOffset.mdx",sourceDirName:"scroll",slug:"/scroll/useScrollViewOffset",permalink:"/react-native-reanimated/docs/next/scroll/useScrollViewOffset",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/scroll/useScrollViewOffset.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"scrollTo",permalink:"/react-native-reanimated/docs/next/scroll/scrollTo"},next:{title:"useAnimatedScrollHandler",permalink:"/react-native-reanimated/docs/next/scroll/useAnimatedScrollHandler"}},d={},u=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"<code>initialRef</code> <Optional/>",id:"initialref-",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.yg)("div",t)},f=m("Optional"),p=m("InteractiveExample"),g=m("PlatformCompatibility"),y={toc:u},h="wrapper";function b(e){let{components:t,...n}=e;return(0,l.yg)(h,(0,a.A)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"usescrollviewoffset"},"useScrollViewOffset"),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"useScrollViewOffset")," lets you to create animations based on the offset of a ",(0,l.yg)("inlineCode",{parentName:"p"},"ScrollView"),".\nThe hook automatically detects if the ",(0,l.yg)("inlineCode",{parentName:"p"},"ScrollView")," is horizontal or vertical."),(0,l.yg)("h2",{id:"reference"},"Reference"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-tsx"},"import { useScrollViewOffset } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n  // highlight-next-line\n  const scrollOffset = useScrollViewOffset(animatedRef);\n  return (\n    <Animated.ScrollView ref={animatedRef}>{/* ... */}</Animated.ScrollView>\n  );\n}\n")),(0,l.yg)("details",null,(0,l.yg)("summary",null,"Type definitions"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-typescript"},"function useScrollViewOffset(\n  animatedRef: AnimatedRef<AnimatedScrollView>,\n  initialRef?: SharedValue<number>\n): SharedValue<number>;\n"))),(0,l.yg)("h3",{id:"arguments"},"Arguments"),(0,l.yg)("h4",{id:"animatedref"},(0,l.yg)("inlineCode",{parentName:"h4"},"animatedRef")),(0,l.yg)("p",null,"An ",(0,l.yg)("a",{parentName:"p",href:"/docs/next/core/useAnimatedRef#returns"},"animated ref")," connected to the ScrollView component you'd want to scroll on. The animated ref has to be passed either to an ",(0,l.yg)("a",{parentName:"p",href:"/docs/next/fundamentals/glossary#animated-component"},"Animated component")," or a React Native built-in component."),(0,l.yg)("h4",{id:"initialref-"},(0,l.yg)("inlineCode",{parentName:"h4"},"initialRef")," ",(0,l.yg)(f,{mdxType:"Optional"})),(0,l.yg)("p",null,"An optional shared value to be updated with the scroll offset. If not provided a new shared value will be created internally."),(0,l.yg)("h3",{id:"returns"},"Returns"),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"useScrollViewOffset")," returns a ",(0,l.yg)("a",{parentName:"p",href:"/docs/next/fundamentals/glossary#shared-value"},"shared value")," which holds the current offset of the ",(0,l.yg)("inlineCode",{parentName:"p"},"ScrollView"),"."),(0,l.yg)("h2",{id:"example"},"Example"),(0,l.yg)(p,{src:r.A,component:o.A,showCode:!0,mdxType:"InteractiveExample"}),(0,l.yg)("h2",{id:"remarks"},"Remarks"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"The ",(0,l.yg)("inlineCode",{parentName:"p"},"animatedRef")," argument can be changed at will and the hook will correctly return values based on the ScrollView component it is connected to, for example:"),(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"useScrollViewOffset(someState ? someScrollRefA : someScrollRefB)")))),(0,l.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,l.yg)(g,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}b.isMDXComponent=!0},37443:(e,t,n)=>{n.d(t,{A:()=>a});const a="import React from 'react';\nimport { View, Text, StyleSheet, TextInput, Button } from 'react-native';\nimport Animated, {\n  useAnimatedProps,\n  useAnimatedRef,\n  useDerivedValue,\n  useScrollViewOffset,\n} from 'react-native-reanimated';\nimport type { DerivedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const animatedRef = useAnimatedRef<Animated.ScrollView>();\n  // highlight-start\n  const offset = useScrollViewOffset(animatedRef);\n  const text = useDerivedValue(\n    () => `Scroll offset: ${offset.value.toFixed(1)}`\n  );\n  // highlight-end\n  const [isScrollHorizontal, setIsScrollHorizontal] =\n    React.useState<boolean>(false);\n\n  return (\n    <View style={styles.container}>\n      <AnimatedText text={text} />\n      <Animated.ScrollView\n        style={styles.scroll}\n        contentContainerStyle={styles.scrollContent}\n        ref={animatedRef}\n        horizontal={isScrollHorizontal}>\n        {Array.from({ length: 10 }).map((_, i) => (\n          <View key={i} style={styles.box}>\n            <Text style={styles.center}>{i}</Text>\n          </View>\n        ))}\n      </Animated.ScrollView>\n      <Button\n        title={`Toggle scroll to ${\n          isScrollHorizontal ? 'vertical' : 'horizontal'\n        }`}\n        onPress={() => setIsScrollHorizontal(!isScrollHorizontal)}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n  },\n  scroll: {\n    borderWidth: 1,\n    borderColor: 'gray',\n    height: 250,\n    width: 250,\n    margin: 20,\n  },\n  scrollContent: {\n    alignItems: 'center',\n  },\n  box: {\n    width: 100,\n    height: 100,\n    margin: 10,\n    borderRadius: 15,\n    backgroundColor: '#b58df1',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  center: {\n    textAlign: 'center',\n  },\n});\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\nAnimated.addWhitelistedNativeProps({ text: true });\n\nfunction AnimatedText({ text, ...props }: { text: DerivedValue<string> }) {\n  const animatedProps = useAnimatedProps(() => ({\n    text: text.value,\n    defaultValue: text.value,\n  }));\n  return (\n    <AnimatedTextInput\n      editable={false}\n      {...props}\n      value={text.value}\n      animatedProps={animatedProps}\n    />\n  );\n}\n"},62257:(e,t,n)=>{n.d(t,{A:()=>c});var a=n(96540),l=n(72188),o=n(46413),r=n(78506),i=a.forwardRef(((e,t)=>{var n=e.accessibilityLabel,l=e.color,i=e.disabled,c=e.onPress,d=e.testID,u=e.title;return a.createElement(o.A,{accessibilityLabel:n,accessibilityRole:"button",disabled:i,focusable:!i,onPress:c,ref:t,style:[s.button,l&&{backgroundColor:l},i&&s.buttonDisabled],testID:d},a.createElement(r.A,{style:[s.text,i&&s.textDisabled]},u))}));i.displayName="Button";var s=l.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const c=i}}]);
"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[39],{15680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>c});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),p=s(t),y=r,c=p["".concat(l,".").concat(y)]||p[y]||u[y]||i;return t?a.createElement(c,o(o({ref:n},m),{},{components:t})):a.createElement(c,o({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=y;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d[p]="string"==typeof e?e:r,o[1]=d;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},81442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>v,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=t(58168),r=(t(96540),t(15680)),i=(t(86025),t(21238));const o={sidebar_position:1},d=void 0,l={unversionedId:"device/useAnimatedKeyboard",id:"device/useAnimatedKeyboard",title:"useAnimatedKeyboard",description:"useAnimatedKeyboard lets you create animations based on state and height of the virtual keyboard.",source:"@site/docs/device/useAnimatedKeyboard.mdx",sourceDirName:"device",slug:"/device/useAnimatedKeyboard",permalink:"/react-native-reanimated/docs/next/device/useAnimatedKeyboard",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/device/useAnimatedKeyboard.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Device",permalink:"/react-native-reanimated/docs/next/category/device"},next:{title:"useAnimatedSensor",permalink:"/react-native-reanimated/docs/next/device/useAnimatedSensor"}},s={},m=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>options</code> <Optional />",id:"options-",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},u=p("Optional"),y=p("InteractiveExample"),c=p("ThemedVideo"),g=p("AvailableFrom"),b=p("PlatformCompatibility"),h={toc:m},f="wrapper";function v(e){let{components:n,...t}=e;return(0,r.yg)(f,(0,a.A)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," lets you create animations based on state and height of the virtual keyboard."),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"Android implementation of ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," has drawbacks on Android SDK < 30, for more details see ",(0,r.yg)("a",{parentName:"p",href:"/docs/device/useAnimatedKeyboard#remarks"},"remarks")," section.")),(0,r.yg)("h2",{id:"reference"},"Reference"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"import { useAnimatedKeyboard, useAnimatedStyle } from 'react-native-reanimated';\n\nexport default function App() {\n  const keyboard = useAnimatedKeyboard();\n\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ translateY: -keyboard.height.value }],\n  }));\n}\n")),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Type definitions"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"// --- Function declaration ---\n\nfunction useAnimatedKeyboard(\n  options: AnimatedKeyboardOptions\n): AnimatedKeyboardInfo;\n\n// --- Configuration types ---\n\nexport interface AnimatedKeyboardOptions {\n  isStatusBarTranslucentAndroid?: boolean;\n}\n\n// --- Return types ---\n\nexport type AnimatedKeyboardInfo = {\n  height: SharedValue<number>;\n  state: SharedValue<KeyboardState>;\n};\n\nexport enum KeyboardState {\n  UNKNOWN = 0,\n  OPENING = 1,\n  OPEN = 2,\n  CLOSING = 3,\n  CLOSED = 4,\n}\n"))),(0,r.yg)("h3",{id:"arguments"},"Arguments"),(0,r.yg)("h4",{id:"options-"},(0,r.yg)("inlineCode",{parentName:"h4"},"options")," ",(0,r.yg)(u,{mdxType:"Optional"})),(0,r.yg)("p",null,"Optional object containing additional configuration:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"isStatusBarTranslucentAndroid")," - removes top inset on Android i.e. to use translucent status bar on Android, set this option to ",(0,r.yg)("inlineCode",{parentName:"li"},"true"),". Defaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"false"),". Ignored on iOS.")),(0,r.yg)("h3",{id:"returns"},"Returns"),(0,r.yg)("p",null,"Hook ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," returns an object containing these fields:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"height"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"SharedValue<number>")),(0,r.yg)("td",{parentName:"tr",align:null},"A ",(0,r.yg)("a",{parentName:"td",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," containing current height of the keyboard.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"state"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"SharedValue<KeyboardState>")),(0,r.yg)("td",{parentName:"tr",align:null},"A ",(0,r.yg)("a",{parentName:"td",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," containing current state of the keyboard. Possible states: ",(0,r.yg)("inlineCode",{parentName:"td"},"{ CLOSED, OPEN, CLOSING, OPENING }"))))),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)(y,{src:i.A,component:()=>(0,r.yg)(c,{center:!0,width:300,sources:{light:"/recordings/useAnimatedKeyboard_light.mov",dark:"/recordings/useAnimatedKeyboard_dark.mov"},mdxType:"ThemedVideo"}),mdxType:"InteractiveExample"}),(0,r.yg)("h2",{id:"remarks"},"Remarks"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"On Android, make sure to set ",(0,r.yg)("inlineCode",{parentName:"p"},"android:windowSoftInputMode")," in your ",(0,r.yg)("inlineCode",{parentName:"p"},"AndroidManifest.xml")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"adjustResize"),". Then, using the ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook disables\nthe default Android behavior (resizing the view to accommodate keyboard) in the whole app. Using values from ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook you can handle the keyboard yourself. Unmounting all components that use ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook brings back the default Android behavior.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"On Android, using the ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedKeyboard")," hook expands root view to full screen (",(0,r.yg)("a",{parentName:"p",href:"https://developer.android.com/develop/ui/views/layout/immersive"},"immersive mode"),") and takes control over insets management."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"When ",(0,r.yg)("inlineCode",{parentName:"p"},"isStatusBarTranslucentAndroid")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," it applies the top margin according to the insets.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"When ",(0,r.yg)("inlineCode",{parentName:"p"},"isStatusBarTranslucentAndroid")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," it sets top margin to ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"When ",(0,r.yg)("inlineCode",{parentName:"p"},"isNavigationBarTranslucentAndroid")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," it applies the bottom margin according to the insets.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"When ",(0,r.yg)("inlineCode",{parentName:"p"},"isNavigationBarTranslucentAndroid")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," it sets bottom margin to ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),".")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"On Android, when using navigation with native header, ",(0,r.yg)("inlineCode",{parentName:"p"},"isStatusBarTranslucentAndroid")," doesn't affect the top inset.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"On Android SDK < 30, when status bar is hidden, the keyboard reverts to the default Android behavior.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)(g,{version:"3.17.0",mdxType:"AvailableFrom"})," On iPad, when the keyboard is floating, the hook will always return height: ",(0,r.yg)("code",null,"0"),"and state: ",(0,r.yg)("code",null,"CLOSED"),".")),(0,r.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,r.yg)(b,{android:!0,ios:!0,mdxType:"PlatformCompatibility"}))}v.isMDXComponent=!0},21238:(e,n,t)=>{t.d(n,{A:()=>a});const a="import React from 'react';\nimport Animated, {\n  useAnimatedKeyboard,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\nimport { StyleSheet, TextInput, View, useColorScheme } from 'react-native';\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n  const keyboard = useAnimatedKeyboard();\n\n  const animatedStyles = useAnimatedStyle(() => ({\n    transform: [{ translateY: -keyboard.height.value }],\n  }));\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        animatedStyles,\n        { backgroundColor: colorScheme === 'light' ? '#fff' : '#000' },\n      ]}>\n      <View style={styles.box}>\n        <TextInput placeholder=\"Text Input\" />\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    borderWidth: 5,\n    borderColor: '#782aeb',\n    borderRadius: 2,\n  },\n  box: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 200,\n    backgroundColor: '#b58df1',\n    borderRadius: 5,\n    margin: 20,\n  },\n});\n"}}]);
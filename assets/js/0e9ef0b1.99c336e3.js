"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[1893],{27052:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>w,contentTitle:()=>v,default:()=>I,frontMatter:()=>x,metadata:()=>C,toc:()=>P});var r=n(58168),i=n(96540),a=n(15680),o=n(9176),s=n(62257),l=n(72188),p=n(52747);function c(){const[e,t]=(0,i.useReducer)((e=>!e),!1);return i.createElement(o.A,{style:d.container},i.createElement(p.default.View,{style:[d.box,{width:e?240:120,backgroundColor:e?"#fa7f7c":"#87cce8",transitionProperty:["width","backgroundColor"],transitionDuration:500}]}),i.createElement(s.A,{onPress:t,title:"Click me"}))}const d=l.A.create({container:{flex:1,alignItems:"center",justifyContent:"center",height:"100%"},box:{height:120,width:120,marginVertical:64}}),y="import React, { useReducer } from 'react';\nimport { StyleSheet, View, Button } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nexport default function App() {\n  const [isToggled, toggle] = useReducer((s) => !s, false);\n\n  return (\n    <View style={styles.container}>\n      <Animated.View\n        style={[\n          styles.box,\n          {\n            width: isToggled ? 240 : 120,\n            backgroundColor: isToggled ? '#fa7f7c' : '#87cce8',\n            // highlight-next-line\n            transitionProperty: ['width', 'backgroundColor'],\n            transitionDuration: 500,\n          },\n        ]}\n      />\n      <Button onPress={toggle} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  box: {\n    height: 120,\n    width: 120,\n    marginVertical: 64,\n  },\n});\n";var m=n(70690);const g=p.default.createAnimatedComponent(m.A),u=["#fa7f7c","#b58df1","#ffe780","#82cab2","#87cce8"];function f(e){let{width:t}=e;const n=t>500?u:u.slice(0,3),[r,a]=(0,i.useState)(0);return i.createElement(o.A,{style:h.container},n.map(((e,t)=>i.createElement(g,{onPress:()=>a(t),key:t,style:[h.box,{backgroundColor:e,flexGrow:t===r?3:1,transitionProperty:"flexGrow",transitionDuration:300}]}))))}const h=l.A.create({container:{flex:1,flexDirection:"row",alignItems:"center",justifyContent:"center",height:"100%",gap:16,marginHorizontal:16},box:{height:120,marginVertical:64}}),b="import React, { useState } from 'react';\nimport { StyleSheet, View, Pressable } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\n\nconst COLORS = ['#fa7f7c', '#b58df1', '#ffe780', '#82cab2', '#87cce8'];\n\ninterface AppProps {\n  width: number;\n}\n\nexport default function App({ width }: AppProps) {\n  const colors = width > 500 ? COLORS : COLORS.slice(0, 3);\n  const [expandedId, setExpandedId] = useState(0);\n\n  return (\n    <View style={styles.container}>\n      {colors.map((color, id) => {\n        return (\n          <AnimatedPressable\n            onPress={() => setExpandedId(id)}\n            key={id}\n            style={[\n              styles.box,\n              {\n                backgroundColor: color,\n                flexGrow: id === expandedId ? 3 : 1,\n                // highlight-next-line\n                transitionProperty: 'flexGrow',\n                transitionDuration: 300,\n              },\n            ]}\n          />\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    gap: 16,\n    marginHorizontal: 16,\n  },\n  box: {\n    height: 120,\n    marginVertical: 64,\n  },\n});\n",x={sidebar_position:2},v="transitionProperty",C={unversionedId:"css-transitions/transition-property",id:"css-transitions/transition-property",title:"transitionProperty",description:"transitionProperty lets you specify the name or names of styles properties to transition.",source:"@site/docs/css-transitions/transition-property.mdx",sourceDirName:"css-transitions",slug:"/css-transitions/transition-property",permalink:"/react-native-reanimated/docs/next/css-transitions/transition-property",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/css-transitions/transition-property.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"CSS Transitions",permalink:"/react-native-reanimated/docs/next/category/css-transitions"},next:{title:"transitionDuration",permalink:"/react-native-reanimated/docs/next/css-transitions/transition-duration"}},w={},P=[{value:"Reference",id:"reference",level:2},{value:"Values",id:"values",level:3},{value:"<code>&lt;style property&gt;</code>",id:"style-property",level:4},{value:"<code>&lt;style property&gt;[]</code>",id:"style-property-1",level:4},{value:"<code>all</code>",id:"all",level:4},{value:"<code>none</code>",id:"none",level:4},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],N=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",t)},k=N("InteractiveExample"),S=N("PlatformCompatibility"),A={toc:P},D="wrapper";function I(e){let{components:t,...n}=e;return(0,a.yg)(D,(0,r.A)({},A,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"transitionproperty"},"transitionProperty"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"transitionProperty")," lets you specify the name or names of styles properties to transition."),(0,a.yg)(k,{src:y,component:c,mdxType:"InteractiveExample"}),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"function App() {\n  return (\n    <Animated.View\n      style={{\n        // highlight-next-line\n        transitionProperty: 'width',\n        transitionDuration: 300,\n      }}\n    />\n  );\n}\n")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Type definitions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"import type { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\ntype PlainStyle = ViewStyle & TextStyle & ImageStyle;\n\ntype CSSTransitionProperty<S extends object = PlainStyle> =\n  | 'all'\n  | 'none'\n  | keyof S\n  | ('all' | keyof S)[];\n"))),(0,a.yg)("h3",{id:"values"},"Values"),(0,a.yg)("h4",{id:"style-property"},(0,a.yg)("inlineCode",{parentName:"h4"},"<style property>")),(0,a.yg)("p",null,"A string which is a single style property to transition when it's value changes."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"transitionProperty: 'backgroundColor';\n")),(0,a.yg)("h4",{id:"style-property-1"},(0,a.yg)("inlineCode",{parentName:"h4"},"<style property>[]")),(0,a.yg)("p",null,"An array of strings which are properties to transition when their values changes."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"transitionProperty: ['borderWidth', 'borderColor'];\n")),(0,a.yg)("h4",{id:"all"},(0,a.yg)("inlineCode",{parentName:"h4"},"all")),(0,a.yg)("p",null,"Every property that can be transitioned will be."),(0,a.yg)("h4",{id:"none"},(0,a.yg)("inlineCode",{parentName:"h4"},"none")),(0,a.yg)("p",null,"No properties will transition."),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)(k,{src:b,component:f,label:"Click rectangles to grow",mdxType:"InteractiveExample"}),(0,a.yg)("h2",{id:"remarks"},"Remarks"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"You need to use the ",(0,a.yg)("a",{parentName:"p",href:"/docs/next/css-transitions/transition-duration"},(0,a.yg)("inlineCode",{parentName:"a"},"transitionDuration"))," alongside the ",(0,a.yg)("inlineCode",{parentName:"p"},"transitionProperty")," to create transitions.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The property that you want to transition using ",(0,a.yg)("inlineCode",{parentName:"p"},"transitionProperty")," needs to be applied to the same component.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Discrete style properties (like ",(0,a.yg)("inlineCode",{parentName:"p"},"flexDirection"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"justifyContent"),") can't be smoothly animated using the ",(0,a.yg)("inlineCode",{parentName:"p"},"transitionProperty")," property. For example, you can't animate smoothly from ",(0,a.yg)("inlineCode",{parentName:"p"},"alignItems: start")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"alignItems: center"),". You can use ",(0,a.yg)("a",{parentName:"p",href:"/docs/layout-animations/layout-transitions"},"Layout Animations")," to animate discrete style properties instead.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We discourage the use of ",(0,a.yg)("inlineCode",{parentName:"p"},"all")," property as it can lead to performance issues."))),(0,a.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,a.yg)(S,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}I.isMDXComponent=!0},62257:(e,t,n)=>{n.d(t,{A:()=>p});var r=n(96540),i=n(72188),a=n(46413),o=n(78506),s=r.forwardRef(((e,t)=>{var n=e.accessibilityLabel,i=e.color,s=e.disabled,p=e.onPress,c=e.testID,d=e.title;return r.createElement(a.A,{accessibilityLabel:n,accessibilityRole:"button",disabled:s,focusable:!s,onPress:p,ref:t,style:[l.button,i&&{backgroundColor:i},s&&l.buttonDisabled],testID:c},r.createElement(o.A,{style:[l.text,s&&l.textDisabled]},d))}));s.displayName="Button";var l=i.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const p=s}}]);
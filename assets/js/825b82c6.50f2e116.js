"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[9933],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>c});var i=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),m=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=m(e.components);return i.createElement(s.Provider,{value:t},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),y=m(n),p=a,c=y["".concat(s,".").concat(p)]||y[p]||d[p]||r;return n?i.createElement(c,o(o({ref:t},u),{},{components:n})):i.createElement(c,o({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[y]="string"==typeof e?e:a,o[1]=l;for(var m=2;m<r;m++)o[m]=n[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},60240:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var i=n(58168),a=(n(96540),n(15680));const r={sidebar_position:6,title:"List Layout Animations",sidebar_label:"List Layout Animations"},o=void 0,l={unversionedId:"layout-animations/list-layout-animations",id:"layout-animations/list-layout-animations",title:"List Layout Animations",description:"itemLayoutAnimation lets you define a layout transition that's applied when list items layout changes. You can use one of the predefined transitions like LinearTransition or create your own transition.",source:"@site/docs/layout-animations/list-layout-animations.mdx",sourceDirName:"layout-animations",slug:"/layout-animations/list-layout-animations",permalink:"/react-native-reanimated/docs/next/layout-animations/list-layout-animations",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/layout-animations/list-layout-animations.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"List Layout Animations",sidebar_label:"List Layout Animations"},sidebar:"tutorialSidebar",previous:{title:"Skipping Layout Animations",permalink:"/react-native-reanimated/docs/next/layout-animations/layout-animation-config"},next:{title:"Shared Element Transitions",permalink:"/react-native-reanimated/docs/next/category/shared-element-transitions"}},s={},m=[{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",t)},y=u("Row"),d=u("ThemedVideo"),p=u("Indent"),c=u("PlatformCompatibility"),g={toc:m},f="wrapper";function h(e){let{components:t,...n}=e;return(0,a.yg)(f,(0,i.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"itemLayoutAnimation")," lets you define a ",(0,a.yg)("a",{parentName:"p",href:"/docs/next/layout-animations/layout-transitions"},"layout transition")," that's applied when list items layout changes. You can use one of the ",(0,a.yg)("a",{parentName:"p",href:"/docs/next/layout-animations/layout-transitions#predefined-transitions"},"predefined transitions")," like ",(0,a.yg)("inlineCode",{parentName:"p"},"LinearTransition")," or create ",(0,a.yg)("a",{parentName:"p",href:"/docs/next/layout-animations/custom-animations#custom-layout-transition"},"your own transition"),"."),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)(y,{mdxType:"Row"},(0,a.yg)(d,{sources:{light:"/recordings/layout-animations/listitem_light.mov",dark:"/recordings/layout-animations/listitem_dark.mov"},mdxType:"ThemedVideo"}),(0,a.yg)("div",{style:{flexGrow:1}},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"import Animated, { LinearTransition } from 'react-native-reanimated';\n\nfunction App() {\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      // highlight-next-line\n      itemLayoutAnimation={LinearTransition}\n    />\n  );\n}\n")))),(0,a.yg)("h2",{id:"remarks"},"Remarks"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"itemLayoutAnimation")," works only with a single-column ",(0,a.yg)("inlineCode",{parentName:"li"},"Animated.FlatList"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"numColumns")," property cannot be greater than 1."),(0,a.yg)("li",{parentName:"ul"},"You can change the ",(0,a.yg)("inlineCode",{parentName:"li"},"itemLayoutAnimation")," on the fly or disable it by setting it to ",(0,a.yg)("inlineCode",{parentName:"li"},"undefined"),".")),(0,a.yg)(p,{mdxType:"Indent"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  const [transition, setTransition] = useState(LinearTransition);\n\n  const changeTransition = () => {\n    // highlight-start\n    setTransition(\n      transition === LinearTransition ? JumpingTransition : LinearTransition\n    );\n    // highlight-end\n  };\n\n  const toggleTransition = () => {\n    // highlight-next-line\n    setTransition(transition ? undefined : LinearTransition);\n  };\n\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      // highlight-next-line\n      itemLayoutAnimation={transition}\n    />\n  );\n}\n"))),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"If the list items contain neither a ",(0,a.yg)("inlineCode",{parentName:"li"},"key")," nor ",(0,a.yg)("inlineCode",{parentName:"li"},"id")," property (which are used by default by the FlatList ",(0,a.yg)("a",{parentName:"li",href:"https://reactnative.dev/docs/flatlist#keyextractor"},"keyExtractor")," to create list item keys), you must provide your own implementation of the ",(0,a.yg)("inlineCode",{parentName:"li"},"keyExtractor")," function that returns a unique key for each list item.")),(0,a.yg)(p,{mdxType:"Indent"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  return (\n    <Animated.FlatList\n      data={data}\n      renderItem={renderItem}\n      itemLayoutAnimation={LinearTransition}\n      // highlight-next-line\n      keyExtractor={customKeyExtractor}\n    />\n  );\n}\n"))),(0,a.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,a.yg)(c,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}h.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[8694],{43501:(e,n,t)=>{t.d(n,{A:()=>c});var a=t(96540),i=t(9176),r=t(78506),l=t(62257),o=t(72188),s=t(52747);const u={code:"function AnimatedReactionMeasureTsx1(){const{width}=this.__closure;return width.value;}"},d={code:"function AnimatedReactionMeasureTsx2(){const{measure,animatedRef,runOnJS,setText}=this.__closure;const measurement=measure(animatedRef);if(measurement!==null){runOnJS(setText)(measurement.width);}}"};function c(){const e=(0,s.useAnimatedRef)(),n=(0,s.useSharedValue)(100),[t,o]=a.useState(n.value);return(0,s.useAnimatedReaction)(function(){const e=()=>n.value;return e.__closure={width:n},e.__workletHash=0x9ca2f9b520a,e.__initData=u,e}(),function(){const n=function(){const n=(0,s.measure)(e);null!==n&&(0,s.runOnJS)(o)(n.width)};return n.__closure={measure:s.measure,animatedRef:e,runOnJS:s.runOnJS,setText:o},n.__workletHash=0xefdff183d98,n.__initData=d,n}()),a.createElement(i.A,{style:m.container},a.createElement(s.default.View,{ref:e,style:{...m.box,width:n}}),a.createElement(r.A,{style:m.label},"width: ",t),a.createElement(l.A,{onPress:()=>{n.value=(0,s.withSpring)(n.value+50)},title:"Click me"}))}const m=o.A.create({container:{flex:1,alignItems:"center"},box:{height:100,backgroundColor:"#b58df1",borderRadius:20},label:{fontSize:24,marginVertical:16,color:"#b58df1"}})},13048:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>b,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var a=t(58168),i=(t(96540),t(15680)),r=t(43501),l=t(55630);const o={sidebar_position:2},s="useAnimatedReaction",u={unversionedId:"advanced/useAnimatedReaction",id:"advanced/useAnimatedReaction",title:"useAnimatedReaction",description:"useAnimatedReaction allows you to respond to changes in a shared value. It's especially useful when comparing values previously stored in the shared value with the current one.",source:"@site/docs/advanced/useAnimatedReaction.mdx",sourceDirName:"advanced",slug:"/advanced/useAnimatedReaction",permalink:"/react-native-reanimated/docs/next/advanced/useAnimatedReaction",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/advanced/useAnimatedReaction.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"measure",permalink:"/react-native-reanimated/docs/next/advanced/measure"},next:{title:"useFrameCallback",permalink:"/react-native-reanimated/docs/next/advanced/useFrameCallback"}},d={},c=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>prepare</code>",id:"prepare",level:4},{value:"<code>react</code>",id:"react",level:4},{value:"<code>dependencies</code> <Optional/>",id:"dependencies-",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.yg)("div",n)},p=m("Optional"),h=m("InteractiveExample"),g=m("Indent"),y=m("PlatformCompatibility"),f={toc:c},v="wrapper";function b(e){let{components:n,...t}=e;return(0,i.yg)(v,(0,a.A)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"useanimatedreaction"},"useAnimatedReaction"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"useAnimatedReaction")," allows you to respond to changes in a ",(0,i.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared value"),". It's especially useful when comparing values previously stored in the shared value with the current one."),(0,i.yg)("h2",{id:"reference"},"Reference"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"import { useAnimatedReaction } from 'react-native-reanimated';\n\nfunction App() {\n  useAnimatedReaction(\n    () => {\n      return sv.value;\n    },\n    (currentValue, previousValue) => {\n      if (currentValue !== previousValue) {\n        // do something \u2728\n      }\n    }\n  );\n\n  // ...\n}\n")),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Type definitions"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"type DependencyList = ReadonlyArray<any>;\n\nfunction useAnimatedReaction<T>(\n  prepare: () => T,\n  react: (prepareResult: T, preparePreviousResult: T | null) => void,\n  dependencies?: DependencyList\n): void;\n"))),(0,i.yg)("h3",{id:"arguments"},"Arguments"),(0,i.yg)("h4",{id:"prepare"},(0,i.yg)("inlineCode",{parentName:"h4"},"prepare")),(0,i.yg)("p",null,"A function that should return a value to which you'd like to react. The value returned from this function is used as the first parameter of the ",(0,i.yg)("inlineCode",{parentName:"p"},"react")," argument."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  useAnimatedReaction(\n    // highlight-start\n    () => {\n      return Math.floor(sv.value);\n    },\n    // highlight-end\n    (currentValue, previousValue) => {\n      // ...\n    }\n  );\n}\n")),(0,i.yg)("h4",{id:"react"},(0,i.yg)("inlineCode",{parentName:"h4"},"react")),(0,i.yg)("p",null,"A function that reacts to changes in the value returned by the ",(0,i.yg)("inlineCode",{parentName:"p"},"prepare")," function. The ",(0,i.yg)("inlineCode",{parentName:"p"},"react")," function has two parameters: the current value from the ",(0,i.yg)("inlineCode",{parentName:"p"},"prepare")," function and the previous value, which is initially set to ",(0,i.yg)("inlineCode",{parentName:"p"},"null"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  useAnimatedReaction(\n    () => {\n      return Math.floor(sv.value);\n    },\n    // highlight-next-line\n    (currentValue, previousValue) => {\n      // ...\n      // highlight-next-line\n    }\n  );\n}\n")),(0,i.yg)("h4",{id:"dependencies-"},(0,i.yg)("inlineCode",{parentName:"h4"},"dependencies")," ",(0,i.yg)(p,{mdxType:"Optional"})),(0,i.yg)("p",null,"An optional array of dependencies."),(0,i.yg)("p",null,"Only relevant when using Reanimated ",(0,i.yg)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/guides/web-support#web-without-the-babel-plugin"},"without the Babel plugin on the Web"),"."),(0,i.yg)("h3",{id:"returns"},"Returns"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"useAnimatedReaction")," returns ",(0,i.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,i.yg)("h2",{id:"example"},"Example"),(0,i.yg)(h,{src:l.A,component:r.A,mdxType:"InteractiveExample"}),(0,i.yg)("h2",{id:"remarks"},"Remarks"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ensure you do not mutate the same shared value in the ",(0,i.yg)("inlineCode",{parentName:"li"},"result")," function that you've used in the ",(0,i.yg)("inlineCode",{parentName:"li"},"prepare")," function, as this will lead to an infinite loop.")),(0,i.yg)(g,{mdxType:"Indent"},(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  useAnimatedReaction(\n    () => {\n      // highlight-next-line\n      return width.value;\n    },\n    (currentValue) => {\n      // \ud83d\udea8 An infinite loop!\n      // highlight-next-line\n      width.value += currentValue;\n    }\n  );\n}\n"))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Callbacks passed to the ",(0,i.yg)("inlineCode",{parentName:"p"},"prepare")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"result")," arguments are automatically ",(0,i.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#to-workletize"},"workletized")," and run on the ",(0,i.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),".")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"You can technically react to any stateful React value using ",(0,i.yg)("inlineCode",{parentName:"p"},"useAnimatedReaction")," but you should probably use a ",(0,i.yg)("inlineCode",{parentName:"p"},"useEffect")," for that instead."))),(0,i.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,i.yg)(y,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}b.isMDXComponent=!0},55630:(e,n,t)=>{t.d(n,{A:()=>a});const a="import React from 'react';\nimport { Button, StyleSheet, View, Text } from 'react-native';\nimport Animated, {\n  measure,\n  runOnJS,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\n\nexport default function App() {\n  const animatedRef = useAnimatedRef<Animated.View>();\n  const width = useSharedValue<number>(100);\n  const [text, setText] = React.useState(width.value);\n\n  const handlePress = () => {\n    width.value = withSpring(width.value + 50);\n  };\n\n  // highlight-start\n  useAnimatedReaction(\n    () => width.value,\n    () => {\n      const measurement = measure(animatedRef);\n\n      if (measurement !== null) {\n        runOnJS(setText)(measurement.width);\n      }\n    }\n  );\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      <Animated.View ref={animatedRef} style={{ ...styles.box, width }} />\n      <Text style={styles.label}>width: {text}</Text>\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n  },\n  label: {\n    fontSize: 24,\n    marginVertical: 16,\n    color: '#b58df1',\n  },\n});\n"},62257:(e,n,t)=>{t.d(n,{A:()=>u});var a=t(96540),i=t(72188),r=t(46413),l=t(78506),o=a.forwardRef(((e,n)=>{var t=e.accessibilityLabel,i=e.color,o=e.disabled,u=e.onPress,d=e.testID,c=e.title;return a.createElement(r.A,{accessibilityLabel:t,accessibilityRole:"button",disabled:o,focusable:!o,onPress:u,ref:n,style:[s.button,i&&{backgroundColor:i},o&&s.buttonDisabled],testID:d},a.createElement(l.A,{style:[s.text,o&&s.textDisabled]},c))}));o.displayName="Button";var s=i.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const u=o}}]);
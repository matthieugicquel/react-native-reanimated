"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[4088],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(t),p=a,g=m["".concat(l,".").concat(p)]||m[p]||d[p]||o;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},59261:(e,n,t)=>{t.d(n,{A:()=>m});var r=t(96540),a=t(9176),o=t(78506),i=t(72188),s=t(55535),l=t(98348);const u={code:"function RunOnUITsx1(){const{measure,animatedRef,runOnJS,onPress}=this.__closure;const measurements=measure(animatedRef);runOnJS(onPress)(measurements);}"};function c(e){const n=(0,l.A)(),{children:t,onPress:a}=e,o=(0,s.useAnimatedRef)();return r.createElement(s.default.Text,{style:[d.title,n],onPress:()=>{(0,s.runOnUI)(function(){const e=function(){const e=(0,s.measure)(o);(0,s.runOnJS)(a)(e)};return e.__closure={measure:s.measure,animatedRef:o,runOnJS:s.runOnJS,onPress:a},e.__workletHash=0xc6582d6c3d1,e.__initData=u,e}())()},ref:o},t)}function m(){const[e,n]=r.useState(0),t=e=>{n(Math.floor(e.width))};return r.createElement(a.A,{style:d.container},["React","Native","Reanimated"].map((e=>r.createElement(c,{key:e,onPress:t},e))),r.createElement(o.A,{style:d.label},"width: ",e))}const d=i.A.create({container:{flex:1,alignItems:"center"},box:{height:100,width:100,backgroundColor:"#b58df1",borderRadius:20,marginVertical:64,alignSelf:"center"},title:{fontSize:42,textAlign:"center",fontWeight:"bold",marginRight:8},label:{fontSize:24,marginVertical:16,color:"#b58df1"}})},98348:(e,n,t)=>{t.d(n,{A:()=>o});var r=t(50264),a=t(72188);const o=()=>{const{colorScheme:e}=(0,r.Ut)();return"light"===e?i.darkText:i.lightText},i=a.A.create({lightText:{color:"var(--swm-off-white)"},darkText:{color:"var(--swm-navy-light-100)"}})},91616:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>u,toc:()=>m});var r=t(58168),a=(t(96540),t(15680)),o=t(59261),i=t(66494);const s={sidebar_position:2},l="runOnUI",u={unversionedId:"threading/runOnUI",id:"version-3.x/threading/runOnUI",title:"runOnUI",description:"runOnUI lets you asynchronously run workletized functions on the UI thread.",source:"@site/versioned_docs/version-3.x/threading/runOnUI.mdx",sourceDirName:"threading",slug:"/threading/runOnUI",permalink:"/react-native-reanimated/docs/threading/runOnUI",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-3.x/threading/runOnUI.mdx",tags:[],version:"3.x",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"runOnJS",permalink:"/react-native-reanimated/docs/threading/runOnJS"},next:{title:"runOnRuntime",permalink:"/react-native-reanimated/docs/threading/runOnRuntime"}},c={},m=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"fn",id:"fn",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",n)},p=d("InteractiveExample"),g=d("PlatformCompatibility"),f={toc:m},y="wrapper";function h(e){let{components:n,...t}=e;return(0,a.yg)(y,(0,r.A)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"runonui"},"runOnUI"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"runOnUI")," lets you asynchronously run ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#to-workletize"},"workletized")," functions on the ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),"."),(0,a.yg)("p",null,"Most commonly used either with an ",(0,a.yg)("inlineCode",{parentName:"p"},"useEffect")," to start an animation on component mount/unmount or with ",(0,a.yg)("a",{parentName:"p",href:"/docs/advanced/measure"},(0,a.yg)("inlineCode",{parentName:"a"},"measure"))," and ",(0,a.yg)("a",{parentName:"p",href:"/docs/scroll/scrollTo"},(0,a.yg)("inlineCode",{parentName:"a"},"scrollTo"))," functions which have implementations only on the UI thread."),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import { runOnUI } from 'react-native-reanimated';\n\nfunction App() {\n  // E.g. in event handler or in an effect\n  // highlight-next-line\n  runOnUI((greeting) => {\n    console.log(`${greeting} from the UI thread`);\n    // highlight-next-line\n  })('Howdy');\n\n  // ...\n}\n")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Type definitions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function runOnUI<A extends any[], R>(\n  fn: (...args: A) => R\n): (...args: Parameters<typeof fn>) => void;\n"))),(0,a.yg)("h3",{id:"arguments"},"Arguments"),(0,a.yg)("h4",{id:"fn"},"fn"),(0,a.yg)("p",null,"A reference to a function you want to execute on the ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread")," from the ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#javascript-thread"},"JavaScript thread"),". Arguments to your function have to be passed to the function returned from ",(0,a.yg)("inlineCode",{parentName:"p"},"runOnUI")," i.e. ",(0,a.yg)("inlineCode",{parentName:"p"},"runOnUI(myWorklet)(10);"),"."),(0,a.yg)("h3",{id:"returns"},"Returns"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"runOnUI")," returns a function that accepts arguments for the function passed as the first argument."),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Don't forget to call the function returned from ",(0,a.yg)("inlineCode",{parentName:"p"},"runOnUI"),".")),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)(p,{src:i.A,component:o.A,label:"Tap each word",mdxType:"InteractiveExample"}),(0,a.yg)("h2",{id:"remarks"},"Remarks"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When implementing your animations you should first reach for more general solutions such as ",(0,a.yg)("a",{parentName:"p",href:"/docs/core/useDerivedValue"},(0,a.yg)("inlineCode",{parentName:"a"},"useDerivedValue")),", ",(0,a.yg)("a",{parentName:"p",href:"/docs/advanced/useAnimatedReaction"},(0,a.yg)("inlineCode",{parentName:"a"},"useAnimatedReaction"))," or running code in gesture callbacks and only use ",(0,a.yg)("inlineCode",{parentName:"p"},"runOnUI")," after you've tried other methods.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"It's a common mistake to execute function inside of runOnUI like this: ",(0,a.yg)("del",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"del"},"runOnUI(myWorklet(10))()")),". Here, the correct usage would be ",(0,a.yg)("inlineCode",{parentName:"p"},"runOnUI(myWorklet)(10)"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The callback passed as the argument is automatically ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#to-workletize"},"workletized")," and ready to be run on the ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Make sure not to execute ",(0,a.yg)("inlineCode",{parentName:"p"},"runOnUI")," on the UI thread as this will result in an error."))),(0,a.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,a.yg)(g,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}h.isMDXComponent=!0},66494:(e,n,t)=>{t.d(n,{A:()=>r});const r="import React from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\nimport Animated, {\n  runOnJS,\n  measure,\n  useAnimatedRef,\n  runOnUI,\n  MeasuredDimensions,\n} from 'react-native-reanimated';\nimport useThemedTextStyle from '@site/src/hooks/useThemedTextStyle';\n\ntype MeasurableTextProps = React.PropsWithChildren<{\n  onPress: (measurements: MeasuredDimensions) => void;\n}>;\n\nfunction MeasurableText(props: MeasurableTextProps) {\n  const textColor = useThemedTextStyle();\n  const { children, onPress } = props;\n  const animatedRef = useAnimatedRef<Animated.View>();\n\n  const handleMeasure = () => {\n    // highlight-next-line\n    runOnUI(() => {\n      const measurements = measure(animatedRef);\n      runOnJS(onPress)(measurements);\n      // highlight-next-line\n    })();\n  };\n\n  return (\n    <Animated.Text\n      style={[styles.title, textColor]}\n      onPress={handleMeasure}\n      ref={animatedRef}>\n      {children}\n    </Animated.Text>\n  );\n}\n\nexport default function App() {\n  const [text, setText] = React.useState(0);\n\n  const handlePress = (measurements: MeasuredDimensions) => {\n    setText(Math.floor(measurements.width));\n  };\n\n  return (\n    <View style={styles.container}>\n      {['React', 'Native', 'Reanimated'].map((word) => (\n        <MeasurableText key={word} onPress={handlePress}>\n          {word}\n        </MeasurableText>\n      ))}\n      <Text style={styles.label}>width: {text}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    width: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginVertical: 64,\n    alignSelf: 'center',\n  },\n  title: {\n    fontSize: 42,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    marginRight: 8,\n  },\n  label: {\n    fontSize: 24,\n    marginVertical: 16,\n    color: '#b58df1',\n  },\n});\n"}}]);
"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[6293],{1842:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>x,contentTitle:()=>N,default:()=>F,frontMatter:()=>b,metadata:()=>C,toc:()=>v});var i=t(58168),a=t(96540),r=t(15680),o=t(9176),s=t(62257),l=t(72188),m=t(55535);function p(){const[e,n]=(0,a.useReducer)((e=>!e),!1);return a.createElement(o.A,{style:d.container},a.createElement(m.default.View,{style:[d.box,{transform:[{translateX:e?175:-175}],transitionProperty:"transform",transitionDuration:700,transitionTimingFunction:"linear"}]}),a.createElement(s.A,{onPress:n,title:"Click me"}))}const d=l.A.create({container:{flex:1,alignItems:"center",justifyContent:"center",height:"100%"},box:{height:120,width:120,backgroundColor:"#b58df1",marginVertical:64}}),u="import React, { useReducer } from 'react';\nimport { StyleSheet, View, Button } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nexport default function App() {\n  const [isToggled, toggle] = useReducer((s) => !s, false);\n\n  return (\n    <View style={styles.container}>\n      <Animated.View\n        style={[\n          styles.box,\n          {\n            transform: [{ translateX: isToggled ? 175 : -175 }],\n            transitionProperty: 'transform',\n            transitionDuration: 700,\n            // highlight-next-line\n            transitionTimingFunction: 'linear',\n          },\n        ]}\n      />\n      <Button onPress={toggle} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    marginVertical: 64,\n  },\n});\n";var c=t(78506);const g=["jump-start","jump-end","jump-none","jump-both"];function y(){const[e,n]=(0,a.useReducer)((e=>!e),!1);return a.createElement(o.A,{style:f.container},g.map((n=>a.createElement(m.default.View,{key:n,style:[f.box,{width:e?"100%":100,transitionProperty:"width",transitionDuration:"2s",transitionTimingFunction:(0,m.steps)(6,n)}]},a.createElement(c.A,{style:f.label},n)))),a.createElement(s.A,{onPress:n,title:"Click me"}))}const f=l.A.create({container:{flex:1,alignItems:"center",justifyContent:"center",height:"100%",gap:4},box:{height:28,backgroundColor:"#b58df1",alignItems:"center",justifyContent:"center"},label:{color:"white",fontWeight:"bold"}}),h="import React, { useReducer } from 'react';\nimport { StyleSheet, View, Button, Text } from 'react-native';\nimport Animated, { steps } from 'react-native-reanimated';\n\nconst stepsModifiers = [\n  'jump-start',\n  'jump-end',\n  'jump-none',\n  'jump-both',\n] as const;\n\nexport default function App() {\n  const [isToggled, toggle] = useReducer((s) => !s, false);\n\n  return (\n    <View style={styles.container}>\n      {stepsModifiers.map((step) => (\n        <Animated.View\n          key={step}\n          style={[\n            styles.box,\n            {\n              width: isToggled ? '100%' : 100,\n              transitionProperty: 'width',\n              transitionDuration: '2s',\n              // highlight-next-line\n              transitionTimingFunction: steps(6, step),\n            },\n          ]}>\n          <Text style={styles.label}>{step}</Text>\n        </Animated.View>\n      ))}\n      <Button onPress={toggle} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    gap: 4,\n  },\n  box: {\n    height: 28,\n    backgroundColor: '#b58df1',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n});\n",b={sidebar_position:5},N="transitionTimingFunction",C={unversionedId:"css-transitions/transition-timing-function",id:"css-transitions/transition-timing-function",title:"transitionTimingFunction",description:"transitionTimingFunction lets you adjust how intermediate values are calculated during the transition. Defaults to ease.",source:"@site/docs/css-transitions/transition-timing-function.mdx",sourceDirName:"css-transitions",slug:"/css-transitions/transition-timing-function",permalink:"/react-native-reanimated/docs/next/css-transitions/transition-timing-function",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/css-transitions/transition-timing-function.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"transitionDelay",permalink:"/react-native-reanimated/docs/next/css-transitions/transition-delay"},next:{title:"transitionBehavior",permalink:"/react-native-reanimated/docs/next/css-transitions/transition-behavior"}},x={},v=[{value:"Reference",id:"reference",level:2},{value:"Values",id:"values",level:3},{value:"<code>&lt;predefined timing function&gt;</code>",id:"predefined-timing-function",level:4},{value:"<code>&lt;parametrized timing function&gt;</code>",id:"parametrized-timing-function",level:4},{value:"<code>&lt;timing function[]&gt;</code>",id:"timing-function",level:4},{value:"Examples",id:"examples",level:2},{value:"Steps",id:"steps",level:3},{value:"Platform compatibility",id:"platform-compatibility",level:2}],w=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},T=w("InteractiveExample"),j=w("Indent"),P=w("PlatformCompatibility"),S={toc:v},A="wrapper";function F(e){let{components:n,...t}=e;return(0,r.yg)(A,(0,i.A)({},S,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"transitiontimingfunction"},"transitionTimingFunction"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"transitionTimingFunction")," lets you adjust how intermediate values are calculated during the transition. Defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"ease"),"."),(0,r.yg)(T,{src:u,component:p,mdxType:"InteractiveExample"}),(0,r.yg)("h2",{id:"reference"},"Reference"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"function App() {\n  return (\n    <Animated.View\n      style={{\n        transitionProperty: 'height',\n        transitionDuration: 300,\n        // highlight-next-line\n        transitionTimingFunction: 'ease-out',\n      }}\n    />\n  );\n}\n")),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Type definitions"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"type NormalizedCubicBezierEasing = {\n  name: string;\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n};\ntype NormalizedLinearEasing = {\n  name: string;\n  points: Point[];\n};\ntype NormalizedStepsEasing = {\n  name: string;\n  points: Point[];\n};\n\ntype ControlPoint = number | [number, ...Percentage[]];\n\ntype StepsModifier =\n  | 'jump-start'\n  | 'start'\n  | 'jump-end'\n  | 'end'\n  | 'jump-none'\n  | 'jump-both';\n\ntype NormalizedCSSTimingFunction =\n  | PredefinedTimingFunction\n  | NormalizedCubicBezierEasing\n  | NormalizedLinearEasing\n  | NormalizedStepsEasing;\n\ntype PredefinedTimingFunction =\n  | 'linear'\n  | 'ease'\n  | 'ease-in'\n  | 'ease-out'\n  | 'ease-in-out'\n  | 'step-start'\n  | 'step-end';\n\ninterface ParametrizedTimingFunction {\n  toString(): string;\n  normalize(): NormalizedCSSTimingFunction;\n}\n\ntype CSSTimingFunction = PredefinedTimingFunction | ParametrizedTimingFunction;\ntype CSSTransitionTimingFunction = CSSTimingFunction | CSSTimingFunction[];\n"))),(0,r.yg)("h3",{id:"values"},"Values"),(0,r.yg)("p",null,"Easings control the pacing of animations and transitions."),(0,r.yg)("h4",{id:"predefined-timing-function"},(0,r.yg)("inlineCode",{parentName:"h4"},"<predefined timing function>")),(0,r.yg)("p",null,"A string representing a predefined timing function. Available functions:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"linear")," - a constant speed from start to finish,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ease")," - starts slow, speeds up, then slows down,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ease-in")," - starts slow and accelerates,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ease-out")," - starts quickly and decelerates,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ease-in-out")," - starts slowly, speeds up, and then slows down again."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"step-start")," - jumps instantly at the start,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"step-end")," - jumps instantly at the end.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"transitionTimingFunction: 'linear',\n")),(0,r.yg)("h4",{id:"parametrized-timing-function"},(0,r.yg)("inlineCode",{parentName:"h4"},"<parametrized timing function>")),(0,r.yg)("p",null,"A returned object from parametrized timing functions. Available functions:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"cubicBezier(x1: number, y1: number, x2: number, y2: number)")," - a B\xe9zier curve to shape the progress of an animation. It is defined by two control points (x1, y1, x2, y2) that mathematically describe the curve.")),(0,r.yg)(j,{mdxType:"Indent"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { cubicBezier } from 'react-native-reanimated';\n\ntransitionTimingFunction: cubicBezier(0.25, 0.1, 0.5, 2),\n"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"linear(...points: ControlPoint[])")," - a simple polygonal chain that always starts at an x-value of 0 and ends at an x-value of 1. You can either specify the points' y and x coordinates or leave the x coordinates to be inferred.")),(0,r.yg)(j,{mdxType:"Indent"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { linear } from 'react-native-reanimated';\n\ntransitionTimingFunction: linear(0, [0.25, '75%'], 1),\n"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"steps(stepsNumber: number, modifier?: StepsModifier)")," - creates an easing function that makes given number of even steps over increasing y-values. The second argument is a modifier that adds jumps before or after the steps. Modifier defaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"jump-end"),".",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"jump-start")," - a left-continuous function, where the first jump occurs at the start of the transition,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"jump-end")," - a right-continuous function, where the final jump occurs at the end of the transition,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"jump-none")," - no jump on either end. Maintaining a hold at both the 0% and 100% points, each for 1/n of the total duration,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"jump-both")," - adds pauses at both the 0% and 100% points, introducing an additional step during the transition,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"start")," - an alias for ",(0,r.yg)("inlineCode",{parentName:"li"},"jump-start"),","),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"end")," - an alias for ",(0,r.yg)("inlineCode",{parentName:"li"},"jump-end"),",")))),(0,r.yg)(j,{mdxType:"Indent"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { steps } from 'react-native-reanimated';\n\ntransitionTimingFunction: steps(4, 'jump-end'),\n"))),(0,r.yg)("h4",{id:"timing-function"},(0,r.yg)("inlineCode",{parentName:"h4"},"<timing function[]>")),(0,r.yg)("p",null,"An array of timing functions. The order in this array corresponds to the array of style properties passed to the ",(0,r.yg)("a",{parentName:"p",href:"docs/next/css-transitions/transition-property#style-property-1"},(0,r.yg)("inlineCode",{parentName:"a"},"transitionProperty")),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"// highlight-next-line\ntransitionTimingFunction: ['linear', steps(60, 'jump-none'), 'ease-in-out'];\ntransitionProperty: ['width', 'transform', 'borderRadius'];\n")),(0,r.yg)("p",null,"In the following example, the ",(0,r.yg)("inlineCode",{parentName:"p"},"width")," property will be transitions using ",(0,r.yg)("inlineCode",{parentName:"p"},"linear")," easing, ",(0,r.yg)("inlineCode",{parentName:"p"},"transform")," will use the ",(0,r.yg)("inlineCode",{parentName:"p"},"steps")," timing function, and ",(0,r.yg)("inlineCode",{parentName:"p"},"borderRadius")," will be transitioned using ",(0,r.yg)("inlineCode",{parentName:"p"},"ease-in-out")," easing."),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("h3",{id:"steps"},"Steps"),(0,r.yg)(T,{src:h,component:y,mdxType:"InteractiveExample"}),(0,r.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,r.yg)(P,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}F.isMDXComponent=!0},62257:(e,n,t)=>{t.d(n,{A:()=>m});var i=t(96540),a=t(72188),r=t(46413),o=t(78506),s=i.forwardRef(((e,n)=>{var t=e.accessibilityLabel,a=e.color,s=e.disabled,m=e.onPress,p=e.testID,d=e.title;return i.createElement(r.A,{accessibilityLabel:t,accessibilityRole:"button",disabled:s,focusable:!s,onPress:m,ref:n,style:[l.button,a&&{backgroundColor:a},s&&l.buttonDisabled],testID:p},i.createElement(o.A,{style:[l.text,s&&l.textDisabled]},d))}));s.displayName="Button";var l=a.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const m=s}}]);
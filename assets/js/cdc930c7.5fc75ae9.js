"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[525],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),i=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=i(e.components);return r.createElement(d.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=i(t),u=a,y=p["".concat(d,".").concat(u)]||p[u]||m[u]||o;return t?r.createElement(y,l(l({ref:n},c),{},{components:t})):r.createElement(y,l({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=u;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=t[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},34830:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var r=t(58168),a=(t(96540),t(15680));const o={sidebar_position:6},l="useComposedEventHandler",s={unversionedId:"advanced/useComposedEventHandler",id:"advanced/useComposedEventHandler",title:"useComposedEventHandler",description:"This is a hook that lets you compose useEvent-based event handlers (such as useAnimatedScrollHandler or your own custom ones) into a single, combined event handler.",source:"@site/docs/advanced/useComposedEventHandler.mdx",sourceDirName:"advanced",slug:"/advanced/useComposedEventHandler",permalink:"/react-native-reanimated/docs/next/advanced/useComposedEventHandler",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/advanced/useComposedEventHandler.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"useHandler",permalink:"/react-native-reanimated/docs/next/advanced/useHandler"},next:{title:"dispatchCommand",permalink:"/react-native-reanimated/docs/next/advanced/dispatchCommand"}},d={},i=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>handlers</code>",id:"handlers",level:4},{value:"Returns",id:"returns",level:3},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],c=(p="PlatformCompatibility",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var p;const m={toc:i},u="wrapper";function y(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"usecomposedeventhandler"},"useComposedEventHandler"),(0,a.yg)("p",null,"This is a hook that lets you compose ",(0,a.yg)("a",{parentName:"p",href:"/docs/next/advanced/useEvent"},"useEvent"),"-based event handlers (such as ",(0,a.yg)("a",{parentName:"p",href:"/docs/next/scroll/useAnimatedScrollHandler"},"useAnimatedScrollHandler")," or your own custom ones) into a single, combined event handler."),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"import Animated, {\n  useAnimatedScrollHandler,\n  useComposedEventHandler,\n} from 'react-native-reanimated';\n\nfunction ComposedEventHandlerExample() {\n  const onScrollHandler1 = useAnimatedScrollHandler({\n    onScroll(e) {\n      console.log('Scroll handler 1 onScroll event');\n    },\n  });\n\n  const onScrollHandler2 = useAnimatedScrollHandler({\n    onScroll(e) {\n      console.log('Scroll handler 2 onScroll event');\n    },\n  });\n\n  // highlight-start\n  const composedHandler = useComposedEventHandler([\n    onScrollHandler1,\n    onScrollHandler2,\n  ]);\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      {/* highlight-next-line */}\n      <Animated.ScrollView style={styles.scroll} onScroll={composedHandler}>\n        <Content />\n      </Animated.ScrollView>\n    </View>\n  );\n}\n")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Type definitions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function useComposedEventHandler(\n  handlers: (EventHandlerProcessed<Event, Context> | null)[]\n): ComposedHandlerProcessed<Event, Context>;\n"))),(0,a.yg)("h3",{id:"arguments"},"Arguments"),(0,a.yg)("h4",{id:"handlers"},(0,a.yg)("inlineCode",{parentName:"h4"},"handlers")),(0,a.yg)("p",null,"An array of event handlers created using ",(0,a.yg)("a",{parentName:"p",href:"/docs/next/advanced/useEvent"},"useEvent")," hook. ",(0,a.yg)("inlineCode",{parentName:"p"},"useComposedEventHandler")," hook reacts to any changes in given handlers and rebuilds whenever it is needed."),(0,a.yg)("h3",{id:"returns"},"Returns"),(0,a.yg)("p",null,"The hook returns a handler object that can be hooked into any ",(0,a.yg)("a",{parentName:"p",href:"/docs/next/fundamentals/glossary#animated-component"},(0,a.yg)("inlineCode",{parentName:"a"},"Animated component")),".\nThe handler should be passed to a corresponding ",(0,a.yg)("inlineCode",{parentName:"p"},"onEvent")," prop (e.g. ",(0,a.yg)("inlineCode",{parentName:"p"},"onScroll"),' when working with scroll-related handlers). If your composed handler aggregates multiple events that have little in common, put it into a new property, e.g. "composedHandler". It will still work, but the best practice here would be to use several composed handlers for code clarity.'),(0,a.yg)("h2",{id:"remarks"},"Remarks"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The hook returns a handler that combines functionalities of all the handlers given as an argument. This way, you can have more than one handler responding to a given event, as well as handle many different type events using just one object."),(0,a.yg)("li",{parentName:"ul"},"It will still work well when passed to multiple ",(0,a.yg)("a",{parentName:"li",href:"/docs/next/fundamentals/glossary#animated-component"},(0,a.yg)("inlineCode",{parentName:"a"},"Animated components")),", firing event callbacks for each connected component.")),(0,a.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,a.yg)(c,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}y.isMDXComponent=!0}}]);
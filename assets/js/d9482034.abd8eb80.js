"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[6773],{15680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>y});var i=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),g=u(t),c=a,y=g["".concat(s,".").concat(c)]||g[c]||d[c]||r;return t?i.createElement(y,o(o({ref:n},m),{},{components:t})):i.createElement(y,o({ref:n},m))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<r;u++)o[u]=t[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},89962:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>v,frontMatter:()=>l,metadata:()=>u,toc:()=>g});var i=t(58168),a=(t(96540),t(15680)),r=t(7637),o=t(96287);const l={sidebar_position:4},s="Custom animations",u={unversionedId:"layout-animations/custom-animations",id:"layout-animations/custom-animations",title:"Custom animations",description:"Custom animations give you a full control over the Entering/Exiting animations and Layout transitions. However, they tend to be hard to understand and maintain. We recommend starting with predefined Entering/Exiting, Keyframes and Layout presets first before using custom animations.",source:"@site/docs/layout-animations/custom-animations.mdx",sourceDirName:"layout-animations",slug:"/layout-animations/custom-animations",permalink:"/react-native-reanimated/docs/next/layout-animations/custom-animations",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/layout-animations/custom-animations.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Layout transitions",permalink:"/react-native-reanimated/docs/next/layout-animations/layout-transitions"},next:{title:"Skipping Layout Animations",permalink:"/react-native-reanimated/docs/next/layout-animations/layout-animation-config"}},m={},g=[{value:"Reference",id:"reference",level:2},{value:"Custom Exiting Animation",id:"custom-exiting-animation",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Example",id:"example",level:3},{value:"Custom Entering Animation",id:"custom-entering-animation",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Custom Layout Transition",id:"custom-layout-transition",level:2},{value:"Arguments",id:"arguments-2",level:3},{value:"Example",id:"example-2",level:3},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",n)},c=d("ExampleVideo"),y=d("CollapsibleCode"),p=d("PlatformCompatibility"),f={toc:g},h="wrapper";function v(e){let{components:n,...t}=e;return(0,a.yg)(h,(0,i.A)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"custom-animations"},"Custom animations"),(0,a.yg)("p",null,"Custom animations give you a full control over the Entering/Exiting animations and Layout transitions. However, they tend to be hard to understand and maintain. We recommend starting with predefined ",(0,a.yg)("a",{parentName:"p",href:"/docs/layout-animations/entering-exiting-animations"},"Entering/Exiting"),", ",(0,a.yg)("a",{parentName:"p",href:"/docs/layout-animations/keyframe-animations"},"Keyframes")," and ",(0,a.yg)("a",{parentName:"p",href:"/docs/layout-animations/layout-transitions"},"Layout")," presets first before using custom animations."),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"function CustomAnimation(values) {\n  'worklet';\n  const animations = {\n    // your animations\n  };\n  const initialValues = {\n    // initial values for animations\n  };\n  const callback = (finished: boolean) => {\n    // optional callback that will fire when layout animation ends\n  };\n  return {\n    initialValues,\n    animations,\n    callback,\n  };\n}\n")),(0,a.yg)("h2",{id:"custom-exiting-animation"},"Custom Exiting Animation"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Type definitions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function CustomExitTransition (values: ExitAnimationsValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype ExitAnimationsValues = CurrentLayoutAnimationsValues &\n  WindowDimensions;\n\ntype CurrentLayoutAnimationsValues = {\n  ['currentOriginX', 'currentOriginY', 'currentWidth', 'currentHeight', 'currentBorderRadius', 'currentGlobalOriginX','currentGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n"))),(0,a.yg)("h3",{id:"arguments"},"Arguments"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values")," - contains information about where view was displayed and what were its dimensions",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentOriginX")," - X coordinate of top left corner in parent's coordinate system"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentOriginY")," - Y coordinate of top left corner in parent's coordinate system"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentWidth")," - view's width"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentHeight")," - view's height"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentBorderRadius")," - view's border radius"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentGlobalOriginX")," - X coordinate of top left corner in global coordinate system"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentGlobalOriginY")," - Y coordinate of top left corner in global coordinate system")))),(0,a.yg)("h3",{id:"example"},"Example"),(0,a.yg)(c,{sources:{android:"/react-native-reanimated/recordings/custom_animations/android_exiting_custom.mov",ios:"/react-native-reanimated/recordings/custom_animations/ios_exiting_custom.mov"},mdxType:"ExampleVideo"}),(0,a.yg)(y,{src:r.A,showLines:[29,45],mdxType:"CollapsibleCode"}),(0,a.yg)("h2",{id:"custom-entering-animation"},"Custom Entering Animation"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Type definitions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function CustomEntryTransition (values: EntryAnimationsValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype EntryAnimationsValues = TargetLayoutAnimationsValues &\n  WindowDimensions;\n\ntype TargetLayoutAnimationsValues = {\n  ['targetOriginX', 'targetOriginY', 'targetWidth', 'targetHeight', 'targetBorderRadius', 'targetGlobalOriginX','targetGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n"))),(0,a.yg)("h3",{id:"arguments-1"},"Arguments"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values")," - contains information about where view wants to be displayed and what are its dimensions",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetOriginX")," - X coordinate of top left corner in parent's coordinate system"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetOriginY")," - Y coordinate of top left corner in parent's coordinate system"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetWidth")," - view's width"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetHeight")," - view's height"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetBorderRadius")," - view's border radius"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetGlobalOriginX")," - X coordinate of top left corder in global coordinate system"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetGlobalOriginY")," - Y coordinate of top left corder in global coordinate system")))),(0,a.yg)("h3",{id:"example-1"},"Example"),(0,a.yg)(c,{sources:{android:"/react-native-reanimated/recordings/custom_animations/android_entering_custom.mov",ios:"/react-native-reanimated/recordings/custom_animations/ios_entering_custom.mov"},mdxType:"ExampleVideo"}),(0,a.yg)(y,{src:r.A,showLines:[6,28],mdxType:"CollapsibleCode"}),(0,a.yg)("h2",{id:"custom-layout-transition"},"Custom Layout Transition"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Type definitions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function CustomLayoutTransition (values: LayoutAnimationValues) => LayoutAnimation\n\ntype LayoutAnimation = {\n    initialValues: StyleProps;\n    animations: StyleProps;\n    callback?: (finished: boolean) => void;\n};\n\ntype LayoutAnimationsValues = CurrentLayoutAnimationsValues & TargetLayoutAnimationsValues & WindowDimensions;\n\ntype CurrentLayoutAnimationsValues = {\n    ['currentOriginX', 'currentOriginY', 'currentWidth', 'currentHeight', 'currentBorderRadius', 'currentGlobalOriginX','currentGlobalOriginY']: number;\n};\n\ntype TargetLayoutAnimationsValues = {\n    ['targetOriginX', 'targetOriginY', 'targetWidth', 'targetHeight', 'targetBorderRadius', 'targetGlobalOriginX','targetGlobalOriginY']: number;\n};\n\ninterface WindowDimensions {\n    windowWidth: number;\n    windowHeight: number;\n}\n"))),(0,a.yg)("h3",{id:"arguments-2"},"Arguments"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values")," - contains before and after information about the view's origin and dimensions",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetOriginX")," - X coordinate of top left corner in parent's coordinate system"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetOriginY")," - Y coordinate of top left corner in parent's coordinate system"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetWidth")," - view's width"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetHeight")," - view's height"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetBorderRadius")," - view's border radius"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetGlobalOriginX")," - X coordinate of top left corder in global coordinate system"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.targetGlobalOriginY")," - Y coordinate of top left corder in global coordinate system"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentOriginX")," - X coordinate of top left corner in parent's coordinate system (before)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentOriginY")," - Y coordinate of top left corner in parent's coordinate system (before)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentWidth")," - view's width (before)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentHeight")," - view's height (before)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentBorderRadius")," - view's border radius (before)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentGlobalOriginX")," - X coordinate of top left corner in global coordinate system (before)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"values.currentGlobalOriginY")," - Y coordinate of top left corner in global coordinate system (before)")))),(0,a.yg)("h3",{id:"example-2"},"Example"),(0,a.yg)(c,{sources:{android:"/react-native-reanimated/recordings/custom_animations/android_layout_custom.mov",ios:"/react-native-reanimated/recordings/custom_animations/ios_layout_custom.mov"},mdxType:"ExampleVideo"}),(0,a.yg)(y,{src:o.A,showLines:[8,28],mdxType:"CollapsibleCode"}),(0,a.yg)("h2",{id:"remarks"},"Remarks"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Each Reanimated component has a shared value that keeps the current animations assigned to that particular component. If you start a new animation for a specific property without providing an initial value for that property, the initial value will be taken from the last animation assigned to the component. The only exception is the ",(0,a.yg)("inlineCode",{parentName:"li"},"Entering")," animation, as we have no way to get the previous animation values.")),(0,a.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,a.yg)(p,{android:!0,ios:!0,mdxType:"PlatformCompatibility"}))}v.isMDXComponent=!0},7637:(e,n,t)=>{t.d(n,{A:()=>i});const i="import React, { useState } from 'react';\nimport { View, Button, StyleSheet, SafeAreaView } from 'react-native';\nimport Animated, { withTiming, withDelay } from 'react-native-reanimated';\n\nconst WIDTH = 200;\n\nconst customEntering = (targetValues) => {\n  'worklet';\n  const animations = {\n    originX: withTiming(targetValues.targetOriginX, { duration: 3000 }),\n    opacity: withTiming(1, { duration: 2000 }),\n    borderRadius: withDelay(1500, withTiming(40, { duration: 3000 })),\n    transform: [\n      { rotate: withTiming('0deg', { duration: 4000 }) },\n      { scale: withTiming(1, { duration: 3500 }) },\n    ],\n  };\n  const initialValues = {\n    originX: -WIDTH,\n    opacity: 0,\n    borderRadius: 10,\n    transform: [{ rotate: '90deg' }, { scale: 0.2 }],\n  };\n  return {\n    initialValues,\n    animations,\n  };\n};\n\nconst customExiting = (values) => {\n  'worklet';\n  const animations = {\n    originX: withTiming(2 * WIDTH, { duration: 3000 }),\n    opacity: withTiming(0, { duration: 2000 }),\n    transform: [{ scale: withTiming(0.2, { duration: 3500 }) }],\n  };\n  const initialValues = {\n    originX: values.currentOriginX,\n    opacity: 1,\n    transform: [{ scale: 1 }],\n  };\n  return {\n    initialValues,\n    animations,\n  };\n};\n\nexport default function EnteringExample() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <SafeAreaView>\n      <View style={styles.container}>\n        <Button title=\"Click me\" onPress={() => setShow(!show)} />\n        {show && (\n          <Animated.View\n            style={styles.card}\n            entering={customEntering}\n            exiting={customExiting}\n          />\n        )}\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    padding: 128,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    height: '100%',\n  },\n  card: {\n    width: WIDTH,\n    height: 300,\n    backgroundColor: '#b58df1',\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 20,\n  },\n});\n"},96287:(e,n,t)=>{t.d(n,{A:()=>i});const i="import React, { useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport Animated, {\n  withTiming,\n  withDelay,\n  withSpring,\n} from 'react-native-reanimated';\n\nconst customLayoutTransition = (values) => {\n  'worklet';\n  return {\n    animations: {\n      originX: withTiming(values.targetOriginX, { duration: 1000 }),\n      originY: withDelay(\n        1000,\n        withTiming(values.targetOriginY, { duration: 1000 })\n      ),\n      width: withSpring(values.targetWidth),\n      height: withSpring(values.targetHeight),\n    },\n\n    initialValues: {\n      originX: values.currentOriginX,\n      originY: values.currentOriginY,\n      width: values.currentWidth,\n      height: values.currentHeight,\n    },\n  };\n};\n\nconst Box = ({ label, state }) => {\n  return (\n    <Animated.View\n      layout={customLayoutTransition}\n      style={[\n        styles.box,\n        {\n          flexDirection: state ? 'row' : 'row-reverse',\n          height: state ? 100 : 180,\n        },\n      ]}>\n      <Text>{label}</Text>\n    </Animated.View>\n  );\n};\n\nconst Layout = () => {\n  const [state, setState] = useState(true);\n\n  const handleToggle = () => {\n    setState((prevState) => !prevState);\n  };\n\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.innerContainer,\n          {\n            alignItems: state ? 'center' : 'flex-start',\n          },\n        ]}>\n        <View style={{ flexDirection: state ? 'row' : 'column' }}>\n          {state && <Box key=\"A\" label=\"A\" state={state} />}\n          <Box key=\"B\" label=\"B\" state={state} />\n          {!state && <Box key=\"A\" label=\"A\" state={state} />}\n          <Box key=\"C\" label=\"C\" state={state} />\n        </View>\n      </View>\n      <Button onPress={handleToggle} title=\"Toggle\" />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 12,\n    padding: 16,\n  },\n  innerContainer: {\n    height: 600,\n    display: 'flex',\n    alignItems: 'center',\n  },\n  box: {\n    backgroundColor: 'lightblue',\n    borderRadius: 8,\n    margin: 5,\n    width: 100,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default Layout;\n"}}]);
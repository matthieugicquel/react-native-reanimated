"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[2250],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>h});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),g=a,h=d["".concat(s,".").concat(g)]||d[g]||p[g]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},87477:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(58168),a=(n(96540),n(15680));const o={id:"worklets",sidebar_label:"Worklets",sidebar_position:1},i="Worklets",l={unversionedId:"guides/worklets",id:"guides/worklets",title:"Worklets",description:"Worklets are short-running JavaScript functions that can run on the UI thread. Reanimated uses worklets to calculate view styles and react to events on the UI thread.",source:"@site/docs/guides/worklets.mdx",sourceDirName:"guides",slug:"/guides/worklets",permalink:"/react-native-reanimated/docs/next/guides/worklets",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/guides/worklets.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"worklets",sidebar_label:"Worklets",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/react-native-reanimated/docs/next/category/guides"},next:{title:"Accessibility",permalink:"/react-native-reanimated/docs/next/guides/accessibility"}},s={},c=[{value:"Defining worklets",id:"defining-worklets",level:2},{value:"Workletization",id:"workletization",level:2},{value:"Running worklets on the UI thread",id:"running-worklets-on-the-ui-thread",level:2},{value:"Running functions from worklets",id:"running-functions-from-worklets",level:2},{value:"Hoisting",id:"hoisting",level:2},{value:"Capturing closure",id:"capturing-closure",level:2},{value:"Passing data to worklets",id:"passing-data-to-worklets",level:2},{value:"Using worklets on the Web",id:"using-worklets-on-the-web",level:2},{value:"Other worklet runtimes",id:"other-worklet-runtimes",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"worklets"},"Worklets"),(0,a.yg)("p",null,"Worklets are short-running JavaScript functions that can run on the ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),". Reanimated uses worklets to calculate view styles and react to events on the UI thread."),(0,a.yg)("h2",{id:"defining-worklets"},"Defining worklets"),(0,a.yg)("p",null,"You can create your own worklets using the ",(0,a.yg)("inlineCode",{parentName:"p"},"'worklet';")," directive at the top of a function."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"function myWorklet() {\n  'worklet';\n  console.log('Hello from a worklet');\n}\n")),(0,a.yg)("h2",{id:"workletization"},"Workletization"),(0,a.yg)("p",null,"The ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-worklets/plugin/README-dev.md#basics"},"Reanimated Babel Plugin")," looks for functions marked with the ",(0,a.yg)("inlineCode",{parentName:"p"},"'worklet'")," directive and converts them into serializable objects. We call this process ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#to-workletize"},"workletization"),". These objects can then be copied and run over on the UI thread."),(0,a.yg)("p",null,"Most of the time when working with Reanimated and ",(0,a.yg)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-gesture-handler/"},"Gesture Handler")," the code is automatically workletized and run on the UI thread by default."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import { useAnimatedStyle } from 'react-native-reanimated';\n\nfunction App() {\n  const style = useAnimatedStyle(() => {\n    // Running on the UI thread\n    return { opacity: 0.5 };\n  });\n}\n")),(0,a.yg)("h2",{id:"running-worklets-on-the-ui-thread"},"Running worklets on the UI thread"),(0,a.yg)("p",null,"You can use ",(0,a.yg)("a",{parentName:"p",href:"/docs/threading/runOnUI"},(0,a.yg)("inlineCode",{parentName:"a"},"runOnUI"))," to manually schedule worklet execution on the UI thread:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"function myWorklet() {\n  'worklet';\n  console.log('Hello from the UI thread');\n}\n\nfunction onPress() {\n  runOnUI(myWorklet)();\n}\n")),(0,a.yg)("p",null,"You can pass arguments to worklets."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"function myWorklet(greeting) {\n  'worklet';\n  console.log(`${greeting} from the UI thread`);\n}\n\nfunction onPress() {\n  runOnUI(myWorklet)('Howdy');\n}\n")),(0,a.yg)("h2",{id:"running-functions-from-worklets"},"Running functions from worklets"),(0,a.yg)("p",null,"You can run functions on the JS thread from the UI thread with ",(0,a.yg)("a",{parentName:"p",href:"/docs/threading/runOnJS"},(0,a.yg)("inlineCode",{parentName:"a"},"runOnJS")),". Most frequently used to call functions that aren't marked with a ",(0,a.yg)("inlineCode",{parentName:"p"},"'worklet';")," directive (i.e. most third-party libraries) or to update the React state."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import { router } from 'expo-router';\nimport { Gesture } from 'react-native-gesture-handler';\n\nfunction App() {\n  const tap = Gesture.Tap().onEnd(() => {\n    // i'm a worklet too!\n    // highlight-next-line\n    runOnJS(router.back)();\n  });\n}\n")),(0,a.yg)("p",null,"Functions passed to ",(0,a.yg)("inlineCode",{parentName:"p"},"runOnJS")," must be defined in the ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#javascript-thread"},"JavaScript thread")," scope, i.e. in the component body or the global scope. This code won't work because ",(0,a.yg)("inlineCode",{parentName:"p"},"myFunction")," is defined in the ",(0,a.yg)("inlineCode",{parentName:"p"},"withTiming")," callback, which is only executed in the ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"function App() {\n  const tap = Gesture.Tap().onEnd(() => {\n    // myFunction is defined on the UI thread \ud83d\udea8\n    const myFunction = () => {};\n    runOnJS(myFunction)(); // \ud83d\udca5\n  });\n}\n")),(0,a.yg)("h2",{id:"hoisting"},"Hoisting"),(0,a.yg)("p",null,"Functions marked with ",(0,a.yg)("inlineCode",{parentName:"p"},"'worklet';")," aren't ",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"},"hoisted"),". Besides affecting hoisting, the ",(0,a.yg)("inlineCode",{parentName:"p"},"'worklet';")," directive has no effect on the ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#javascript-thread"},"JavaScript thread"),"."),(0,a.yg)("h2",{id:"capturing-closure"},"Capturing closure"),(0,a.yg)("p",null,"Worklets are ",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"},"closures"),". They can access variables declared outside of their own scope. Only variables referenced in the worklet body will be captured inside the worklet scope."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"const width = 135.5;\n\nfunction otherWorklet() {\n  'worklet';\n  console.log('Captured width is', width);\n}\n")),(0,a.yg)("p",null,"Capturing large JavaScript objects inside of a worklet can lead to performance issues."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"const theme = {...}; // theme is a large object\n\nfunction myWorklet() {\n  'worklet';\n  console.log(theme.color); // \ud83d\udea8 referenced `color` but captured the whole `theme` object\n}\n")),(0,a.yg)("p",null,"You can get around this problem by first assigning the prop you want to use to a separate variable."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"const theme = {...};\nconst color = theme.color;\n\nfunction myWorklet() {\n  'worklet';\n  console.log(color); // \u2705 captured only `color`\n}\n")),(0,a.yg)("h2",{id:"passing-data-to-worklets"},"Passing data to worklets"),(0,a.yg)("p",null,"Worklets can return data within the same thread."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"function returningWorklet() {\n  'worklet';\n  return \"I'm back\"; // on the UI thread\n}\n\nfunction someWorklet() {\n  'worklet';\n  const what = returningWorklet(); // still on the UI thread\n  console.log('On the UI thread, other worklet says', what);\n}\n")),(0,a.yg)("p",null,"To pass data between UI and JS thread we use ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared values"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const width = useSharedValue(100);\n\n  function myWorklet() {\n    'worklet';\n    width.value += 50;\n  }\n\n  useEffect(() => {\n    console.log(width.value); // available on both JS and UI thread\n  }, []);\n}\n")),(0,a.yg)("h2",{id:"using-worklets-on-the-web"},"Using worklets on the Web"),(0,a.yg)("p",null,"There's no separate UI thread available on the Web. Because of that, when Reanimated runs in the browser, worklets are resolved to plain JavaScript functions."),(0,a.yg)("p",null,"However, the ",(0,a.yg)("inlineCode",{parentName:"p"},"'worklet';")," directive is still necessary on the Web, because Reanimated relies on the Babel plugin to capture dependencies inside worklet functions."),(0,a.yg)("h2",{id:"other-worklet-runtimes"},"Other worklet runtimes"),(0,a.yg)("p",null,"Worklets can run in other runtimes than the one provided by Reanimated. For example ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/mrousavy/react-native-vision-camera"},"VisionCamera")," and ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/Expensify/react-native-live-markdown"},"LiveMarkdown")," create their own worklet runtimes."),(0,a.yg)("p",null,"You can create your own worklet runtimes with ",(0,a.yg)("a",{parentName:"p",href:"/docs/threading/createWorkletRuntime"},(0,a.yg)("inlineCode",{parentName:"a"},"createWorkletRuntime"))," function."))}p.isMDXComponent=!0}}]);
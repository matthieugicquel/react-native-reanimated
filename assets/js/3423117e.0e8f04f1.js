"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[3929],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,y=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},29566:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(58168),i=(n(96540),n(15680)),r=n(72098);const o={id:"testing",sidebar_label:"Testing with Jest"},s="Testing with Jest",l={unversionedId:"guides/testing",id:"guides/testing",title:"Testing with Jest",description:"Reanimated provides testing API, based on Jest. It allows user to mock web-based animations.",source:"@site/docs/guides/testing-with-jest.mdx",sourceDirName:"guides",slug:"/guides/testing",permalink:"/react-native-reanimated/docs/next/guides/testing",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/guides/testing-with-jest.mdx",tags:[],version:"current",frontMatter:{id:"testing",sidebar_label:"Testing with Jest"},sidebar:"tutorialSidebar",previous:{title:"Supported style properties",permalink:"/react-native-reanimated/docs/next/guides/supported-properties"},next:{title:"Troubleshooting",permalink:"/react-native-reanimated/docs/next/guides/troubleshooting"}},p={},c=[{value:"Reference",id:"reference",level:2},{value:"Setup",id:"setup",level:2},{value:"API",id:"api",level:2},{value:"Style checker",id:"style-checker",level:3},{value:"<code>expect(component).toHaveAnimatedStyle(expectedStyle)</code>",id:"expectcomponenttohaveanimatedstyleexpectedstyle",level:4},{value:"<code>expect(component).toHaveAnimatedStyle(expectedStyle, {exact: true})</code>",id:"expectcomponenttohaveanimatedstyleexpectedstyle-exact-true",level:4},{value:"<code>expect(component).toHaveAnimatedProps(expectedProps)</code>",id:"expectcomponenttohaveanimatedpropsexpectedprops",level:4},{value:"<code>getDefaultStyle(component)</code>",id:"getdefaultstylecomponent",level:4},{value:"Timers",id:"timers",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Recommended testing library",id:"recommended-testing-library",level:2}],d=(m="CollapsibleCode",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.yg)("div",e)});var m;const u={toc:c},y="wrapper";function g(e){let{components:t,...n}=e;return(0,i.yg)(y,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"testing-with-jest"},"Testing with Jest"),(0,i.yg)("p",null,"Reanimated provides testing API, based on Jest. It allows user to mock web-based animations."),(0,i.yg)("h2",{id:"reference"},"Reference"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"test('reference', () => {\n  // some styles\n\n  const { getByTestId } = render(<AnimatedComponent />);\n  const view = getByTestId('view');\n  const button = getByTestId('button');\n\n  // highlight-next-line\n  expect(view).toHaveAnimatedStyle(style);\n\n  fireEvent.press(button);\n  jest.advanceTimersByTime(250); // if whole animation duration is a 500ms\n\n  style.width = 50; // value of component width after 250ms of animation\n  // highlight-next-line\n  expect(view).toHaveAnimatedStyle(style);\n});\n")),(0,i.yg)("h2",{id:"setup"},"Setup"),(0,i.yg)("p",null,"Add the following line to your ",(0,i.yg)("inlineCode",{parentName:"p"},"jest-setup.js")," file:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"require('react-native-reanimated').setUpTests();\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"setUpTests()")," can take optional config argument. Default config is ",(0,i.yg)("inlineCode",{parentName:"li"},"{ fps: 60 }"),".")),(0,i.yg)("p",null,"To be sure, check if your ",(0,i.yg)("inlineCode",{parentName:"p"},"jest.config.js")," file contains:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"...\npreset: 'react-native',\nsetupFilesAfterEnv: ['./jest-setup.js'],\n...\n")),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"If you use Jest in a version ",(0,i.yg)("strong",{parentName:"p"},"older than 28"),", you should set ",(0,i.yg)("inlineCode",{parentName:"p"},"setupFiles")," property instead of ",(0,i.yg)("inlineCode",{parentName:"p"},"setupFilesAfterEnv"))),(0,i.yg)("h2",{id:"api"},"API"),(0,i.yg)("h3",{id:"style-checker"},"Style checker"),(0,i.yg)("h4",{id:"expectcomponenttohaveanimatedstyleexpectedstyle"},(0,i.yg)("inlineCode",{parentName:"h4"},"expect(component).toHaveAnimatedStyle(expectedStyle)")),(0,i.yg)("p",null,"Checking equality of selected styles with current component styles."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"component")," - tested component."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"expectedStyle")," - contains expected styles of testing component, for example ",(0,i.yg)("inlineCode",{parentName:"li"},"{ width: 100 }"),".")),(0,i.yg)("h4",{id:"expectcomponenttohaveanimatedstyleexpectedstyle-exact-true"},(0,i.yg)("inlineCode",{parentName:"h4"},"expect(component).toHaveAnimatedStyle(expectedStyle, {exact: true})")),(0,i.yg)("p",null,"Checking equality of all current component styles with expected styles."),(0,i.yg)("h4",{id:"expectcomponenttohaveanimatedpropsexpectedprops"},(0,i.yg)("inlineCode",{parentName:"h4"},"expect(component).toHaveAnimatedProps(expectedProps)")),(0,i.yg)("p",null,"Checking equality of selected props with current component props."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"component")," - tested component."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"expectedProps")," - contains expected props of testing component, for example ",(0,i.yg)("inlineCode",{parentName:"li"},"{ text: 'name' }"),".")),(0,i.yg)("h4",{id:"getdefaultstylecomponent"},(0,i.yg)("inlineCode",{parentName:"h4"},"getDefaultStyle(component)")),(0,i.yg)("p",null,"Gets all styles of tested component."),(0,i.yg)("h3",{id:"timers"},"Timers"),(0,i.yg)("p",null,"You can use Jest's fake timers to control animation progress.\nCheck ",(0,i.yg)("a",{parentName:"p",href:"https://jestjs.io/docs/timer-mocks"},"the full guide about mocking timers on Jest documentation website"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"jest.useFakeTimers();\n// call animation\njest.runAllTimers();\n")),(0,i.yg)("p",null,"If you want more control over animation, you can use ",(0,i.yg)("inlineCode",{parentName:"p"},"jest.advanceTimersByTime")," to move to a certain point in the animation:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"jest.useFakeTimers();\n// call animation\njest.advanceTimersByTime(250);\n// make assertions on what you expect the styles of a component should be after 250ms\n")),(0,i.yg)("h2",{id:"example"},"Example"),(0,i.yg)(d,{src:r.A,showLines:[54,70],mdxType:"CollapsibleCode"}),(0,i.yg)("p",null,"More examples from ",(0,i.yg)("inlineCode",{parentName:"p"},"react-native-reanimated")," repository:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/software-mansion/react-native-reanimated/tree/main/packages/react-native-reanimated/__tests__/Animation.test.tsx"},"SharedValue.test.tsx")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/software-mansion/react-native-reanimated/blob/main/packages/react-native-reanimated/__tests__/SharedValue.test.tsx"},"Animation.test.tsx"))),(0,i.yg)("h2",{id:"remarks"},"Remarks"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Tests must run with Node 16 or newer."),(0,i.yg)("li",{parentName:"ul"},"Testing ",(0,i.yg)("inlineCode",{parentName:"li"},"react-native-svg")," props is not supported."),(0,i.yg)("li",{parentName:"ul"},"If you have custom babel configuration for testing, make sure that Reanimated's babel plugin is enabled in that environment.")),(0,i.yg)("h2",{id:"recommended-testing-library"},"Recommended testing library"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://testing-library.com/docs/react-native-testing-library/intro"},"@testing-library/react-native")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://react-hooks-testing-library.com/"},"@testing-library/react-hooks")," - for dealing with hooks")))}g.isMDXComponent=!0},72098:(e,t,n)=>{n.d(t,{A:()=>a});const a="import React from 'react';\nimport { View, Button } from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  withTiming,\n  useSharedValue,\n  SharedValue,\n} from 'react-native-reanimated';\n\ninterface Props {\n  sharedValue: SharedValue<number>;\n}\n\nconst AnimatedSharedValueComponent = (props: Props) => {\n  const widthSV = props.sharedValue;\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(widthSV.value, { duration: 500 }),\n    };\n  });\n\n  return (\n    <View style={{ flex: 1, flexDirection: 'column' }}>\n      <Animated.View\n        testID=\"view\"\n        style={[\n          { width: 0, height: 80, backgroundColor: 'black', margin: 30 },\n          style,\n        ]}\n      />\n      <Button\n        testID=\"button\"\n        title=\"toggle\"\n        onPress={() => {\n          widthSV.value = 100;\n        }}\n      />\n    </View>\n  );\n};\n\nconst AnimatedComponent = () => {\n  return <AnimatedSharedValueComponent sharedValue={useSharedValue(0)} />;\n};\n\nconst getDefaultStyle = () => ({\n  width: 0,\n  height: 80,\n  backgroundColor: 'black',\n  margin: 30,\n});\n\ndescribe('Tests of animations', () => {\n  test('withTiming animation', () => {\n    const style = getDefaultStyle();\n\n    const { getByTestId } = render(<AnimatedComponent />);\n    const view = getByTestId('view');\n    const button = getByTestId('button');\n\n    expect(view.props.style.width).toBe(0);\n    expect(view).toHaveAnimatedStyle(style);\n\n    fireEvent.press(button);\n    jest.advanceTimersByTime(600);\n\n    style.width = 100;\n    expect(view).toHaveAnimatedStyle(style);\n  });\n});\n\n// The 'declare const' section is used because the example workspace doesn't require Jest or Jest types installed.\n// This prevents TypeScript from throwing errors about 'expect', 'test', and other Jest globals.\n// Since we don't want to install '@types/jest', we declare these functions as 'any'.\n\ndeclare const test: any;\ndeclare const expect: any;\ndeclare const describe: any;\ndeclare const fireEvent: any;\ndeclare const render: any;\ndeclare const jest: any;\n\n//\n"}}]);
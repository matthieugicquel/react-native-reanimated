"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[543],{99837:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>C,contentTitle:()=>w,default:()=>V,frontMatter:()=>b,metadata:()=>v,toc:()=>x});var i=n(58168),a=n(96540),r=n(15680),o=n(9176),s=n(62257),l=n(72188),c=n(52773);function d(){const[e,t]=(0,a.useReducer)((e=>!e),!1);return a.createElement(o.A,{style:p.container},a.createElement(c.default.View,{style:[p.box,{alignSelf:e?"flex-start":"flex-end",backgroundColor:e?"#fa7f7c":"#82cab2",transitionProperty:["alignSelf","backgroundColor"],transitionDuration:"1s",transitionBehavior:"allow-discrete"}]}),a.createElement(s.A,{onPress:t,title:"Click me"}))}const p=l.A.create({container:{flex:1,alignItems:"center",justifyContent:"center",height:"100%"},box:{height:120,width:120,margin:64}}),m="import React, { useReducer } from 'react';\nimport { StyleSheet, View, Button } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nexport default function App() {\n  const [isToggled, toggle] = useReducer((s) => !s, false);\n\n  return (\n    <View style={styles.container}>\n      <Animated.View\n        style={[\n          styles.box,\n          {\n            alignSelf: isToggled ? 'flex-start' : 'flex-end',\n            backgroundColor: isToggled ? '#fa7f7c' : '#82cab2',\n            transitionProperty: ['alignSelf', 'backgroundColor'],\n            transitionDuration: '1s',\n            // highlight-next-line\n            transitionBehavior: 'allow-discrete',\n          },\n        ]}\n      />\n      <Button onPress={toggle} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  box: {\n    height: 120,\n    width: 120,\n    margin: 64,\n  },\n});\n",u=["start","space-between","end"],y=["#82cab2","#fa7f7c","#b58df1"];function g(){const[e,t]=(0,a.useReducer)((e=>(e+1)%3),0);return a.createElement(o.A,{style:f.container},a.createElement(c.default.View,{style:[f.row,{justifyContent:u[e],transitionProperty:["justifyContent"],transitionDuration:"1s",transitionBehavior:"allow-discrete"}]},y.map(((t,n)=>a.createElement(c.default.View,{key:n,style:[f.box,{backgroundColor:y[e],transitionProperty:"backgroundColor",transitionDuration:"1s"}]})))),a.createElement(c.default.View,{style:[f.row,{justifyContent:u[e],transitionProperty:["justifyContent"],transitionDuration:"1s",transitionBehavior:"normal"}]},y.map(((t,n)=>a.createElement(c.default.View,{key:n,style:[f.box,{backgroundColor:y[e],transitionProperty:"backgroundColor",transitionDuration:"1s"}]})))),a.createElement(s.A,{onPress:t,title:"Click me"}))}const f=l.A.create({container:{flex:1,alignItems:"center",justifyContent:"center",height:"100%"},row:{flexDirection:"row",width:"100%"},box:{height:80,width:80,backgroundColor:"#82cab2",margin:8}}),h="import React, { useReducer } from 'react';\nimport { StyleSheet, View, Button } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst justify = ['start', 'space-between', 'end'] as const;\nconst colors = ['#82cab2', '#fa7f7c', '#b58df1'];\n\nexport default function App() {\n  const [state, toggle] = useReducer((s) => (s + 1) % 3, 0);\n\n  return (\n    <View style={styles.container}>\n      <Animated.View\n        style={[\n          styles.row,\n          {\n            justifyContent: justify[state] as 'start' | 'space-between' | 'end',\n            transitionProperty: ['justifyContent'],\n            transitionDuration: '1s',\n            // highlight-next-line\n            transitionBehavior: 'allow-discrete',\n          },\n        ]}>\n        {colors.map((_, id) => (\n          <Animated.View\n            key={id}\n            style={[\n              styles.box,\n              {\n                backgroundColor: colors[state],\n                transitionProperty: 'backgroundColor',\n                transitionDuration: '1s',\n              },\n            ]}\n          />\n        ))}\n      </Animated.View>\n      <Animated.View\n        style={[\n          styles.row,\n          {\n            justifyContent: justify[state] as 'start' | 'space-between' | 'end',\n            transitionProperty: ['justifyContent'],\n            transitionDuration: '1s',\n            // highlight-next-line\n            transitionBehavior: 'normal',\n          },\n        ]}>\n        {colors.map((_, id) => (\n          <Animated.View\n            key={id}\n            style={[\n              styles.box,\n              {\n                backgroundColor: colors[state],\n                transitionProperty: 'backgroundColor',\n                transitionDuration: '1s',\n              },\n            ]}\n          />\n        ))}\n      </Animated.View>\n      <Button onPress={toggle} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  row: {\n    flexDirection: 'row',\n    width: '100%',\n  },\n  box: {\n    height: 80,\n    width: 80,\n    backgroundColor: '#82cab2',\n    margin: 8,\n  },\n});\n",b={sidebar_position:6},w="transitionBehavior",v={unversionedId:"css-transitions/transition-behavior",id:"css-transitions/transition-behavior",title:"transitionBehavior",description:"transitionBehavior lets you determine whether the transition is applied to discrete properties. Defaults to normal which transitions only continuous properties and discards discrete properties.",source:"@site/docs/css-transitions/transition-behavior.mdx",sourceDirName:"css-transitions",slug:"/css-transitions/transition-behavior",permalink:"/react-native-reanimated/docs/next/css-transitions/transition-behavior",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/css-transitions/transition-behavior.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"transitionTimingFunction",permalink:"/react-native-reanimated/docs/next/css-transitions/transition-timing-function"},next:{title:"CSS Animations",permalink:"/react-native-reanimated/docs/next/category/css-animations"}},C={},x=[{value:"Reference",id:"reference",level:2},{value:"Values",id:"values",level:3},{value:"<code>allowDiscrete</code>",id:"allowdiscrete",level:4},{value:"<code>normal</code>",id:"normal",level:4},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],k=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",t)},D=k("InteractiveExample"),A=k("PlatformCompatibility"),P={toc:x},N="wrapper";function V(e){let{components:t,...n}=e;return(0,r.yg)(N,(0,i.A)({},P,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"transitionbehavior"},"transitionBehavior"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"transitionBehavior")," lets you determine whether the transition is applied to discrete properties. Defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"normal")," which transitions only continuous properties and discards discrete properties."),(0,r.yg)(D,{src:m,component:d,mdxType:"InteractiveExample"}),(0,r.yg)("h2",{id:"reference"},"Reference"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"function App() {\n  return (\n    <Animated.View\n      style={{\n        transitionProperty: 'alignItems',\n        transitionDuration: 500,\n        // highlight-next-line\n        transitionBehavior: 'allow-discrete',\n      }}\n    />\n  );\n}\n")),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Type definitions"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"type CSSTransitionBehavior = 'normal' | 'allow-discrete';\n"))),(0,r.yg)("h3",{id:"values"},"Values"),(0,r.yg)("h4",{id:"allowdiscrete"},(0,r.yg)("inlineCode",{parentName:"h4"},"allowDiscrete")),(0,r.yg)("p",null,"Allows transitions to be applied to discrete properties, resulting in delayed changes."),(0,r.yg)("h4",{id:"normal"},(0,r.yg)("inlineCode",{parentName:"h4"},"normal")),(0,r.yg)("p",null,"Doesn't allow transitions to be applied to discrete properties, resulting in changes applied immediately."),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)(D,{src:h,component:g,label:"Comparison between allowDiscrete and normal",mdxType:"InteractiveExample"}),(0,r.yg)("h2",{id:"remarks"},"Remarks"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Discrete style properties (like ",(0,r.yg)("inlineCode",{parentName:"p"},"flexDirection"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"justifyContent"),") can't be smoothly animated using the ",(0,r.yg)("inlineCode",{parentName:"p"},"transitionProperty")," property. For example, you can't animate smoothly from ",(0,r.yg)("inlineCode",{parentName:"p"},"alignItems: start")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"alignItems: center"),". You can use ",(0,r.yg)("a",{parentName:"p",href:"docs/layout-animations/layout-transitions"},"Layout Animations")," to animate discrete style properties instead.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"When using ",(0,r.yg)("inlineCode",{parentName:"p"},"allowDiscrete")," the discrete properties flip between two values at the midpoint of the animation, except for the ",(0,r.yg)("inlineCode",{parentName:"p"},"display")," property, which is immediately at the moment of the transition start."))),(0,r.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,r.yg)(A,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}V.isMDXComponent=!0},62257:(e,t,n)=>{n.d(t,{A:()=>c});var i=n(96540),a=n(72188),r=n(46413),o=n(78506),s=i.forwardRef(((e,t)=>{var n=e.accessibilityLabel,a=e.color,s=e.disabled,c=e.onPress,d=e.testID,p=e.title;return i.createElement(r.A,{accessibilityLabel:n,accessibilityRole:"button",disabled:s,focusable:!s,onPress:c,ref:t,style:[l.button,a&&{backgroundColor:a},s&&l.buttonDisabled],testID:d},i.createElement(o.A,{style:[l.text,s&&l.textDisabled]},p))}));s.displayName="Button";var l=a.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const c=s}}]);
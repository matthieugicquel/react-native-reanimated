"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[2296],{15680:(e,n,r)=>{r.d(n,{xA:()=>s,yg:()=>m});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var g=t.createContext({}),c=function(e){var n=t.useContext(g),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},s=function(e){var n=c(e.components);return t.createElement(g.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,g=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(r),p=a,m=d["".concat(g,".").concat(p)]||d[p]||u[p]||i;return r?t.createElement(m,o(o({ref:n},s),{},{components:r})):t.createElement(m,o({ref:n},s))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},433:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>g,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=r(58168),a=(r(96540),r(15680));const i={id:"logger-configuration",sidebar_label:"Logger configuration",sidebar_position:2},o="Logger configuration",l={unversionedId:"debugging/logger-configuration",id:"version-3.x/debugging/logger-configuration",title:"Logger configuration",description:"Reanimated shows warnings that indicate misuses of the library API, such as modifying the shared value during component re-render. These logs can be configured to be more or less verbose.",source:"@site/versioned_docs/version-3.x/debugging/logger-configuration.mdx",sourceDirName:"debugging",slug:"/debugging/logger-configuration",permalink:"/react-native-reanimated/docs/debugging/logger-configuration",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-3.x/debugging/logger-configuration.mdx",tags:[],version:"3.x",sidebarPosition:2,frontMatter:{id:"logger-configuration",sidebar_label:"Logger configuration",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Accurate Call Stacks",permalink:"/react-native-reanimated/docs/debugging/accurate-call-stacks"},next:{title:"Guides",permalink:"/react-native-reanimated/docs/category/guides"}},g={},c=[{value:"Reference",id:"reference",level:2},{value:"Configuration options",id:"configuration-options",level:3},{value:"<code>level</code>",id:"level",level:4},{value:"<code>strict</code>",id:"strict",level:4},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],s=(d="PlatformCompatibility",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var d;const u={toc:c},p="wrapper";function m(e){let{components:n,...r}=e;return(0,a.yg)(p,(0,t.A)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"logger-configuration"},"Logger configuration"),(0,a.yg)("p",null,"Reanimated shows warnings that indicate misuses of the library API, such as modifying the ",(0,a.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," during component re-render. These logs can be configured to be more or less verbose."),(0,a.yg)("p",null,"The ",(0,a.yg)("strong",{parentName:"p"},"default")," logger configuration doesn't require any user setup and displays ",(0,a.yg)("strong",{parentName:"p"},"all warnings and errors"),". If you want to change this behavior, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"configureReanimatedLogger")," function."),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("p",null,"To modify the default Reanimated logger configuration, import ",(0,a.yg)("inlineCode",{parentName:"p"},"configureReanimatedLogger")," from ",(0,a.yg)("inlineCode",{parentName:"p"},"react-native-reanimated")," and call it with the desired configuration."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import {\n  configureReanimatedLogger,\n  ReanimatedLogLevel,\n} from 'react-native-reanimated';\n\n// This is the default configuration\nconfigureReanimatedLogger({\n  level: ReanimatedLogLevel.warn,\n  strict: true, // Reanimated runs in strict mode by default\n});\n")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Type definitions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"function configureReanimatedLogger(config: LoggerConfig): void;\n\ntype LoggerConfig = {\n  level?: ReanimatedLogLevel;\n  strict?: boolean;\n};\n\nenum ReanimatedLogLevel {\n  warn = 1,\n  error = 2,\n}\n"))),(0,a.yg)("h3",{id:"configuration-options"},"Configuration options"),(0,a.yg)("h4",{id:"level"},(0,a.yg)("inlineCode",{parentName:"h4"},"level")),(0,a.yg)("p",null,"A value of the ",(0,a.yg)("inlineCode",{parentName:"p"},"ReanimatedLogLevel")," enum that defines the ",(0,a.yg)("strong",{parentName:"p"},"minimum level")," of the logs that will be shown."),(0,a.yg)("h4",{id:"strict"},(0,a.yg)("inlineCode",{parentName:"h4"},"strict")),(0,a.yg)("p",null,"A boolean value that enables or disables ",(0,a.yg)("strong",{parentName:"p"},"strict")," mode. When ",(0,a.yg)("strong",{parentName:"p"},"strict")," mode is enabled, Reanimated will show more warnings that can help you to catch potential issues in your code."),(0,a.yg)("h2",{id:"remarks"},"Remarks"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The logger configuration is global and affects all warnings and errors displayed by Reanimated. There's no option to configure the logger per file/component.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"configureReanimatedLogger")," function should be called before any Reanimated animations are created, e.g. in the root file of your app.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"configureReanimatedLogger")," function is intended for application developers. If you are creating a library that relies on Reanimated, don't include this function call in your library source code - users will inherit the configuration which will override the default configuration in the Reanimated library."))),(0,a.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,a.yg)(s,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}m.isMDXComponent=!0}}]);
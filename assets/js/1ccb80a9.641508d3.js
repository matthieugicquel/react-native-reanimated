"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[778],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>h});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),d=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),f=r,h=u["".concat(i,".").concat(f)]||u[f]||p[f]||o;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=f;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:r,s[1]=l;for(var d=2;d<o;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2244:(e,t,n)=>{n.d(t,{A:()=>h});var a=n(96540);const r="collapseButton_X7H2",o="arrow_XdVJ";var s;function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}const i=e=>{let{title:t,titleId:n,...r}=e;return a.createElement("svg",l({width:12,height:7,viewBox:"0 0 12 7",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},r),t?a.createElement("title",{id:n},t):null,s||(s=a.createElement("path",{d:"m1 1 5 5 5-5",stroke:"#001A72",strokeWidth:1.5,strokeLinecap:"round",strokeLinejoin:"round"})))};var d;function c(){return c=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},c.apply(this,arguments)}const u=e=>{let{title:t,titleId:n,...r}=e;return a.createElement("svg",c({width:12,height:7,viewBox:"0 0 12 7",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},r),t?a.createElement("title",{id:n},t):null,d||(d=a.createElement("path",{d:"m1 1 5 5 5-5",stroke:"#F8F9FF",strokeWidth:1.5,strokeLinecap:"round",strokeLinejoin:"round"})))};var p=n(95293),f=n(20053);const h=e=>{let{label:t,labelCollapsed:n,collapsed:s,onCollapse:l,className:d}=e;const{colorMode:c}=(0,p.G)();return a.createElement("div",{className:(0,f.default)(r,d),"data-collapsed":s,onClick:()=>l()},"light"===c?a.createElement(i,{className:o}):a.createElement(u,{className:o}),a.createElement("button",null,s?n:t))}},5308:(e,t,n)=>{n.d(t,{A:()=>l});var a=n(96540),r=n(22355);const o={container:"container_oGcb",collapseButton:"collapseButton_YVdr"};var s=n(2244);function l(e){let{src:t,showLines:n}=e;const[l,i]=(0,a.useState)(!0);if(!n)return a.createElement(r.A,{language:"jsx"},t);const[d,c]=n,u=t.split("\n").slice(d,c+1).join("\n");return a.createElement("div",{className:o.container},a.createElement(s.A,{label:"Collapse the full code",labelCollapsed:"Expand the full code",collapsed:l,onCollapse:()=>i(!l),className:o.collapseButton}),a.createElement(r.A,{language:"jsx"},l?u:t))}},39032:(e,t,n)=>{n.d(t,{A:()=>g});var a=n(96540),r=n(39235),o=n(9176),s=n(72188),l=n(36579),i=n(52773);const d=50;i.default.addWhitelistedNativeProps({text:!0});const c=i.default.createAnimatedComponent(l.ks),u={code:"function SliderJs1(event){const{offset,MAX_VALUE,INITIAL_BOX_SIZE,boxWidth}=this.__closure;offset.value=Math.abs(offset.value)<=MAX_VALUE?offset.value+event.changeX<=0?0:offset.value+event.changeX>=MAX_VALUE?MAX_VALUE:offset.value+event.changeX:offset.value;const newWidth=INITIAL_BOX_SIZE+offset.value;boxWidth.value=newWidth;}"},p={code:"function SliderJs2(){const{INITIAL_BOX_SIZE,offset}=this.__closure;return{width:INITIAL_BOX_SIZE+offset.value};}"},f={code:"function SliderJs3(){const{offset}=this.__closure;return{transform:[{translateX:offset.value}]};}"},h={code:'function SliderJs4(){const{boxWidth}=this.__closure;return{text:"Box width: "+Math.round(boxWidth.value),defaultValue:"Box width: "+boxWidth.value};}'},m=s.A.create({container:{flex:1,justifyContent:"center",alignItems:"center",gap:32},sliderTrack:{width:300,height:50,backgroundColor:"#82cab2",borderRadius:25,justifyContent:"center",padding:5},sliderHandle:{width:40,height:40,backgroundColor:"#f8f9ff",borderRadius:20,position:"absolute",left:5},box:{height:d,backgroundColor:"#b58df1",borderRadius:10},boxWidthText:{textAlign:"center",fontSize:18}}),g=()=>{const{colorScheme:e}=(0,r.Ut)(),t=(0,i.useSharedValue)(0),n=(0,i.useSharedValue)(d),s=250,g=l.q6.Pan().onChange(function(){const e=function(e){t.value=Math.abs(t.value)<=s?t.value+e.changeX<=0?0:t.value+e.changeX>=s?s:t.value+e.changeX:t.value;const a=d+t.value;n.value=a};return e.__closure={offset:t,MAX_VALUE:s,INITIAL_BOX_SIZE:d,boxWidth:n},e.__workletHash=4235987107685,e.__initData=u,e}()),y=(0,i.useAnimatedStyle)(function(){const e=function(){return{width:d+t.value}};return e.__closure={INITIAL_BOX_SIZE:d,offset:t},e.__workletHash=0xefa30f5b039,e.__initData=p,e}()),v=(0,i.useAnimatedStyle)(function(){const e=function(){return{transform:[{translateX:t.value}]}};return e.__closure={offset:t},e.__workletHash=7392959334641,e.__initData=f,e}()),b={color:"light"===e?"#001a72":"#f8f9ff"},x=(0,i.useAnimatedProps)(function(){const e=function(){return{text:`Box width: ${Math.round(n.value)}`,defaultValue:`Box width: ${n.value}`}};return e.__closure={boxWidth:n},e.__workletHash=0xfbfe6d8a6fe,e.__initData=h,e}());return a.createElement(l.Zy,{style:m.container},a.createElement(c,{animatedProps:x,style:[b,m.boxWidthText],editable:!1}),a.createElement(i.default.View,{style:[m.box,y]}),a.createElement(o.A,{style:m.sliderTrack},a.createElement(l.Sl,{gesture:g},a.createElement(i.default.View,{style:[m.sliderHandle,v]}))))}},30586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>v,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=n(58168),r=(n(96540),n(15680)),o=n(39032),s=n(48777),l=n(5308);const i={slug:"slider",title:"Slider"},d=void 0,c={permalink:"/react-native-reanimated/examples/slider",source:"@site/blog/slider.md",title:"Slider",description:"Slider allows users to adjust a value or control a setting by sliding a handle along a track. It is commonly used to adjust settings such as volume, brightness, or in this case, the width of a box.",date:"2025-02-07T10:34:10.000Z",formattedDate:"February 7, 2025",tags:[],hasTruncateMarker:!1,authors:[],frontMatter:{slug:"slider",title:"Slider"},prevItem:{title:"Section List",permalink:"/react-native-reanimated/examples/sectionlist"},nextItem:{title:"Switch",permalink:"/react-native-reanimated/examples/switch"}},u={authorsImageUrls:[]},p=[],f=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",t)},h=f("InteractiveExample"),m=f("ExampleVideo"),g={toc:p},y="wrapper";function v(e){let{components:t,...n}=e;return(0,r.yg)(y,(0,a.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Slider allows users to adjust a value or control a setting by sliding a handle along a track. It is commonly used to adjust settings such as volume, brightness, or in this case, the width of a box."),(0,r.yg)(h,{src:s.A,component:o.A,mdxType:"InteractiveExample"}),(0,r.yg)("p",null,"We use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useSharedValue")," hook to store the offset of the slider handle, allowing for smooth animation during sliding."),(0,r.yg)(l.A,{src:s.A,showLines:[24,24],mdxType:"CollapsibleCode"}),(0,r.yg)("p",null,"This example is done using ",(0,r.yg)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture"},"Pan gesture")," from ",(0,r.yg)("inlineCode",{parentName:"p"},"react-native-gesture-handler")," library. It adjusts the handle's position and width of the box accordingly to the current offset. The offset is a ",(0,r.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," and is updated during the ",(0,r.yg)("inlineCode",{parentName:"p"},"onChange")," event of the pan gesture."),(0,r.yg)("samp",{id:"Slider"},"Slider"),(0,r.yg)(l.A,{src:s.A,showLines:[28,41],mdxType:"CollapsibleCode"}),(0,r.yg)(m,{sources:{android:"/react-native-reanimated/recordings/examples/slider_android.mov",ios:"/react-native-reanimated/recordings/examples/slider_ios.mov"},mdxType:"ExampleVideo"}),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedStyle")," hook is used to create animated styles for both the box and the slider handle. This ensures that changes to the offset value result in smooth animations for both components."),(0,r.yg)("samp",{id:"Slider"},"Slider"),(0,r.yg)(l.A,{src:s.A,showLines:[42,52],mdxType:"CollapsibleCode"}),(0,r.yg)("p",null,"Leveraging animated props allows us to run them on the UI thread instead of the JS thread. To prevent unnecessary re-renders when the text displaying the current width of the box changes, we used the ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedProps")," hook."),(0,r.yg)("p",null,"Additionally, we opted for ",(0,r.yg)("strong",{parentName:"p"},"TextInput")," instead of ",(0,r.yg)("strong",{parentName:"p"},"Text")," because ",(0,r.yg)("strong",{parentName:"p"},"TextInput")," has a ",(0,r.yg)("inlineCode",{parentName:"p"},"text")," property that can be animated, whereas ",(0,r.yg)("strong",{parentName:"p"},"Text")," only has children."),(0,r.yg)("p",null,"This approach also enabled us to animate ",(0,r.yg)("strong",{parentName:"p"},"TextInput")," using ",(0,r.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared values"),"."),(0,r.yg)("samp",{id:"Slider"},"Slider"),(0,r.yg)(l.A,{src:s.A,showLines:[58,63],mdxType:"CollapsibleCode"}))}v.isMDXComponent=!0},48777:(e,t,n)=>{n.d(t,{A:()=>a});const a="import React from 'react';\nimport { useColorScheme } from '@mui/material';\nimport { View, StyleSheet } from 'react-native';\nimport { TextInput } from 'react-native-gesture-handler';\nimport {\n  GestureHandlerRootView,\n  GestureDetector,\n  Gesture,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  useAnimatedProps,\n} from 'react-native-reanimated';\n\nconst INITIAL_BOX_SIZE = 50;\nconst SLIDER_WIDTH = 300;\n\nAnimated.addWhitelistedNativeProps({ text: true });\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nconst Slider = () => {\n  const { colorScheme } = useColorScheme();\n  const offset = useSharedValue(0);\n  const boxWidth = useSharedValue(INITIAL_BOX_SIZE);\n  const MAX_VALUE = SLIDER_WIDTH - INITIAL_BOX_SIZE;\n\n  const pan = Gesture.Pan().onChange((event) => {\n    offset.value =\n      Math.abs(offset.value) <= MAX_VALUE\n        ? offset.value + event.changeX <= 0\n          ? 0\n          : offset.value + event.changeX >= MAX_VALUE\n          ? MAX_VALUE\n          : offset.value + event.changeX\n        : offset.value;\n\n    const newWidth = INITIAL_BOX_SIZE + offset.value;\n    boxWidth.value = newWidth;\n  });\n\n  const boxStyle = useAnimatedStyle(() => {\n    return {\n      width: INITIAL_BOX_SIZE + offset.value,\n    };\n  });\n\n  const sliderStyle = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateX: offset.value }],\n    };\n  });\n\n  const animatedBoxTextColor = {\n    color: colorScheme === 'light' ? '#001a72' : '#f8f9ff',\n  };\n\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      text: `Box width: ${Math.round(boxWidth.value)}`,\n      defaultValue: `Box width: ${boxWidth.value}`,\n    };\n  });\n\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <AnimatedTextInput\n        animatedProps={animatedProps}\n        style={[animatedBoxTextColor, styles.boxWidthText]}\n        editable={false}\n      />\n      <Animated.View style={[styles.box, boxStyle]} />\n      <View style={styles.sliderTrack}>\n        <GestureDetector gesture={pan}>\n          <Animated.View style={[styles.sliderHandle, sliderStyle]} />\n        </GestureDetector>\n      </View>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: 32,\n  },\n  sliderTrack: {\n    width: SLIDER_WIDTH,\n    height: 50,\n    backgroundColor: '#82cab2',\n    borderRadius: 25,\n    justifyContent: 'center',\n    padding: 5,\n  },\n  sliderHandle: {\n    width: 40,\n    height: 40,\n    backgroundColor: '#f8f9ff',\n    borderRadius: 20,\n    position: 'absolute',\n    left: 5,\n  },\n  box: {\n    height: INITIAL_BOX_SIZE,\n    backgroundColor: '#b58df1',\n    borderRadius: 10,\n  },\n  boxWidthText: {\n    textAlign: 'center',\n    fontSize: 18,\n  },\n});\n\nexport default Slider;\n"}}]);
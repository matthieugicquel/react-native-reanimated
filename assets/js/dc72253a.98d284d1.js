"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[8200],{79289:(e,n,t)=>{t.d(n,{A:()=>c});var a=t(96540),r=t(15782),i=t(9176),o=t(62257),s=t(72188),l=t(52747);const d=l.default.createAnimatedComponent(r.A),m={code:"function MeasureBasicTsx1(){const{measure,animatedRef,text}=this.__closure;const measurement=measure(animatedRef);if(measurement===null){return;}text.value=Math.floor(measurement.width);}"},u={code:'function MeasureBasicTsx2(){const{text}=this.__closure;return{text:"width: "+text.value,defaultValue:"width: "+text.value};}'};function c(){const e=(0,l.useAnimatedRef)(),n=(0,l.useSharedValue)(100),t=(0,l.useSharedValue)(100),r=(0,l.useAnimatedProps)(function(){const e=function(){return{text:`width: ${t.value}`,defaultValue:`width: ${t.value}`}};return e.__closure={text:t},e.__workletHash=202411436330,e.__initData=u,e}());return a.createElement(i.A,{style:p.container},a.createElement(l.default.View,{ref:e,style:{...p.box,width:n}}),a.createElement(d,{animatedProps:r,style:p.label}),a.createElement(o.A,{onPress:()=>{n.value=(0,l.withTiming)(n.value+50,{},function(){const n=function(){const n=(0,l.measure)(e);null!==n&&(t.value=Math.floor(n.width))};return n.__closure={measure:l.measure,animatedRef:e,text:t},n.__workletHash=2769144099817,n.__initData=m,n}())},title:"Click me"}))}const p=s.A.create({container:{flex:1,alignItems:"center"},box:{height:100,backgroundColor:"#b58df1",borderRadius:20},label:{fontSize:24,marginVertical:16,color:"#b58df1",textAlign:"center"}})},7103:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>v,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var a=t(58168),r=(t(96540),t(15680)),i=t(79289),o=t(53408);const s={sidebar_position:1},l="measure",d={unversionedId:"advanced/measure",id:"advanced/measure",title:"measure",description:"measure lets you synchronously get the dimensions and position of a view on the screen, all on the UI thread.",source:"@site/docs/advanced/measure.mdx",sourceDirName:"advanced",slug:"/advanced/measure",permalink:"/react-native-reanimated/docs/next/advanced/measure",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/docs/advanced/measure.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Advanced APIs",permalink:"/react-native-reanimated/docs/next/category/advanced-apis"},next:{title:"useAnimatedReaction",permalink:"/react-native-reanimated/docs/next/advanced/useAnimatedReaction"}},m={},u=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},p=c("InteractiveExample"),g=c("Indent"),h=c("PlatformCompatibility"),y={toc:u},f="wrapper";function v(e){let{components:n,...t}=e;return(0,r.yg)(f,(0,a.A)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"measure"},"measure"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"measure")," lets you synchronously get the dimensions and position of a view on the screen, all on the ",(0,r.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),"."),(0,r.yg)("h2",{id:"reference"},"Reference"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},"import { measure } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const handlePress = () => {\n    runOnUI(() => {\n      // highlight-next-line\n      const measurement = measure(animatedRef);\n      if (measurement === null) {\n        return;\n      }\n      // ...\n    })();\n  };\n\n  return <Animated.View ref={animatedRef} />;\n}\n")),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Type definitions"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"interface MeasuredDimensions {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  pageX: number;\n  pageY: number;\n}\n\nfunction measure<T extends Component>(\n  animatedRef: AnimatedRef<T>\n): MeasuredDimensions | null;\n"))),(0,r.yg)("h3",{id:"arguments"},"Arguments"),(0,r.yg)("h4",{id:"animatedref"},(0,r.yg)("inlineCode",{parentName:"h4"},"animatedRef")),(0,r.yg)("p",null,"An ",(0,r.yg)("a",{parentName:"p",href:"/docs/core/useAnimatedRef#returns"},"animated ref")," connected to the component you'd want to get the measurements from. The animated ref has to be passed either to an ",(0,r.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animated-component"},"Animated component")," or a React Native built-in component."),(0,r.yg)("h3",{id:"returns"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"measure")," returns an object containing these fields:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"x")," a number representing X coordinate relative to the parent component,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"y")," a number representing Y coordinate relative to the parent component,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"width")," a number representing the width of the component,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"height")," a number representing the height of the component,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"pageX")," a number representing X coordinate relative to the screen,"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"pageY")," a number representing Y coordinate relative to the screen,")),(0,r.yg)("p",null,"or returns ",(0,r.yg)("inlineCode",{parentName:"p"},"null")," when the measurement couldn't be performed."),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)(p,{src:o.A,component:i.A,mdxType:"InteractiveExample"}),(0,r.yg)("h2",{id:"remarks"},"Remarks"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"measure")," is implemented only on the ",(0,r.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),". When using ",(0,r.yg)("inlineCode",{parentName:"p"},"measure")," inside ",(0,r.yg)("a",{parentName:"p",href:"https://react.dev/learn/responding-to-events#adding-event-handlers"},"event handlers"),", it has to be wrapped with the ",(0,r.yg)("a",{parentName:"p",href:"/docs/threading/runOnUI"},(0,r.yg)("inlineCode",{parentName:"a"},"runOnUI"))," function.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedStyle")," function is first evaluated on the ",(0,r.yg)("a",{parentName:"p",href:"/docs/fundamentals/glossary#javascript-thread"},"JavaScript thread")," just before the views are attached to the native side. For this reason, to safely use the measure within ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedStyle"),", a condition similar to the one below must be added to the code:"))),(0,r.yg)(g,{mdxType:"Indent"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  const animatedStyles = useAnimatedStyle(() => {\n    // highlight-next-line\n    if (_WORKLET) {\n      // safely use measure\n      const measurement = measure(animatedRef);\n    }\n  });\n}\n")),(0,r.yg)("p",null,"Consecutive runs of ",(0,r.yg)("inlineCode",{parentName:"p"},"useAnimatedStyle")," are executed on the UI thread.")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"When you only need the dimensions of the component and won't use the measurements during animation, consider using the ",(0,r.yg)("a",{parentName:"p",href:"https://reactnative.dev/docs/view#onlayout"},(0,r.yg)("inlineCode",{parentName:"a"},"onLayout"))," property instead.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Sometimes, ",(0,r.yg)("inlineCode",{parentName:"p"},"measure")," returns ",(0,r.yg)("inlineCode",{parentName:"p"},"null")," (e.g., when the ",(0,r.yg)("inlineCode",{parentName:"p"},"ref")," hasn't yet attached to the view). It's best to add a ",(0,r.yg)("inlineCode",{parentName:"p"},"null")," check after the measurement for added safety."))),(0,r.yg)(g,{mdxType:"Indent"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},"const animatedRef = useAnimatedRef();\n\nconst handlePress = () => {\n  runOnUI(() => {\n    const measurement = measure(animatedRef);\n\n    // highlight-start\n    if (measurement === null) {\n      return;\n    }\n    // highlight-end\n    // ...\n  })();\n};\n"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"measure")," can be used only on rendered components. For instance, attempting to ",(0,r.yg)("inlineCode",{parentName:"p"},"measure")," off-screen items in a ",(0,r.yg)("inlineCode",{parentName:"p"},"FlatList")," will return a ",(0,r.yg)("inlineCode",{parentName:"p"},"null")," value.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"measure")," isn't available with the Remote JS Debugger. We highly recommend using Chrome DevTools (also known as ",(0,r.yg)("inlineCode",{parentName:"p"},"chrome://inspect"),") for debugging React Native apps."))),(0,r.yg)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,r.yg)(h,{android:!0,ios:!0,web:!0,mdxType:"PlatformCompatibility"}))}v.isMDXComponent=!0},53408:(e,n,t)=>{t.d(n,{A:()=>a});const a="import React from 'react';\nimport { Button, StyleSheet, View, TextInput } from 'react-native';\nimport Animated, {\n  MeasuredDimensions,\n  measure,\n  useAnimatedProps,\n  useAnimatedRef,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nexport default function App() {\n  const animatedRef = useAnimatedRef<Animated.View>();\n  const width = useSharedValue<number>(100);\n  const text = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = withTiming(width.value + 50, {}, () => {\n      // highlight-next-line\n      const measurement: MeasuredDimensions | null = measure(animatedRef);\n\n      if (measurement === null) {\n        return;\n      }\n\n      text.value = Math.floor(measurement.width);\n    });\n  };\n\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      text: `width: ${text.value}`,\n      defaultValue: `width: ${text.value}`,\n    };\n  });\n\n  return (\n    <View style={styles.container}>\n      <Animated.View ref={animatedRef} style={{ ...styles.box, width }} />\n      <AnimatedTextInput animatedProps={animatedProps} style={styles.label} />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n  },\n  label: {\n    fontSize: 24,\n    marginVertical: 16,\n    color: '#b58df1',\n    textAlign: 'center',\n  },\n});\n"},62257:(e,n,t)=>{t.d(n,{A:()=>d});var a=t(96540),r=t(72188),i=t(46413),o=t(78506),s=a.forwardRef(((e,n)=>{var t=e.accessibilityLabel,r=e.color,s=e.disabled,d=e.onPress,m=e.testID,u=e.title;return a.createElement(i.A,{accessibilityLabel:t,accessibilityRole:"button",disabled:s,focusable:!s,onPress:d,ref:n,style:[l.button,r&&{backgroundColor:r},s&&l.buttonDisabled],testID:m},a.createElement(o.A,{style:[l.text,s&&l.textDisabled]},u))}));s.displayName="Button";var l=r.A.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const d=s}}]);
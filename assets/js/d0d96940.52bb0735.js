"use strict";(self.webpackChunkdocs_reanimated=self.webpackChunkdocs_reanimated||[]).push([[3758],{15680:(e,n,i)=>{i.d(n,{xA:()=>c,yg:()=>f});var t=i(96540);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var p=t.createContext({}),l=function(e){var n=t.useContext(p),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},c=function(e){var n=l(e.components);return t.createElement(p.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(i),m=r,f=d["".concat(p,".").concat(m)]||d[m]||g[m]||o;return i?t.createElement(f,a(a({ref:n},c),{},{components:i})):t.createElement(f,a({ref:n},c))}));function f(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<o;l++)a[l]=i[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}m.displayName="MDXCreateElement"},6489:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=i(58168),r=(i(96540),i(15680));const o={id:"spring_utils",title:"SpringUtils",sidebar_label:"SpringUtils"},a=void 0,s={unversionedId:"animations/spring_utils",id:"version-1.x/animations/spring_utils",title:"SpringUtils",description:"For developers' convenience, it's possible to use a different way of configuring spring animation which follows behavior known from React Native core.",source:"@site/versioned_docs/version-1.x/animations/springUtils.md",sourceDirName:"animations",slug:"/animations/spring_utils",permalink:"/react-native-reanimated/docs/1.x/animations/spring_utils",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/packages/docs-reanimated/versioned_docs/version-1.x/animations/springUtils.md",tags:[],version:"1.x",frontMatter:{id:"spring_utils",title:"SpringUtils",sidebar_label:"SpringUtils"},sidebar:"version-1.x/docs",previous:{title:"Spring",permalink:"/react-native-reanimated/docs/1.x/animations/spring"},next:{title:"abs",permalink:"/react-native-reanimated/docs/1.x/nodes/abs"}},p={},l=[{value:"<code>SpringUtils.makeDefaultConfig()</code>",id:"springutilsmakedefaultconfig",level:3},{value:"<code>SpringUtils.makeConfigFromBouncinessAndSpeed(prevConfig)</code>",id:"springutilsmakeconfigfrombouncinessandspeedprevconfig",level:3},{value:"<code>SpringUtils.makeConfigFromOrigamiTensionAndFriction(prevConfig)</code>",id:"springutilsmakeconfigfromorigamitensionandfrictionprevconfig",level:3}],c={toc:l},d="wrapper";function g(e){let{components:n,...i}=e;return(0,r.yg)(d,(0,t.A)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"For developers' convenience, it's possible to use a different way of configuring ",(0,r.yg)("inlineCode",{parentName:"p"},"spring")," animation which follows behavior known from React Native core."),(0,r.yg)("h3",{id:"springutilsmakedefaultconfig"},(0,r.yg)("inlineCode",{parentName:"h3"},"SpringUtils.makeDefaultConfig()")),(0,r.yg)("p",null,"Returns an object filled with default config of animation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"}," {\n   stiffness: new Value(100),\n   mass: new Value(1),\n   damping: new Value(10),\n   overshootClamping: false,\n   restSpeedThreshold: 0.001,\n   restDisplacementThreshold: 0.001,\n   toValue: new Value(0),\n }\n")),(0,r.yg)("h3",{id:"springutilsmakeconfigfrombouncinessandspeedprevconfig"},(0,r.yg)("inlineCode",{parentName:"h3"},"SpringUtils.makeConfigFromBouncinessAndSpeed(prevConfig)")),(0,r.yg)("p",null,"Transforms an object with ",(0,r.yg)("inlineCode",{parentName:"p"},"bounciness")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"speed")," params into config expected by the ",(0,r.yg)("inlineCode",{parentName:"p"},"spring")," node. ",(0,r.yg)("inlineCode",{parentName:"p"},"bounciness")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"speed")," might be nodes or numbers."),(0,r.yg)("h3",{id:"springutilsmakeconfigfromorigamitensionandfrictionprevconfig"},(0,r.yg)("inlineCode",{parentName:"h3"},"SpringUtils.makeConfigFromOrigamiTensionAndFriction(prevConfig)")),(0,r.yg)("p",null,"Transforms an object with ",(0,r.yg)("inlineCode",{parentName:"p"},"tension")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"friction")," params into config expected by the ",(0,r.yg)("inlineCode",{parentName:"p"},"spring")," node. ",(0,r.yg)("inlineCode",{parentName:"p"},"tension")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"friction")," might be nodes or numbers."),(0,r.yg)("p",null,"See an ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated/tree/Reanimated2/Example/reanimated1/differentSpringConfigs/index.js"},"Example of different configs"),"."))}g.isMDXComponent=!0}}]);